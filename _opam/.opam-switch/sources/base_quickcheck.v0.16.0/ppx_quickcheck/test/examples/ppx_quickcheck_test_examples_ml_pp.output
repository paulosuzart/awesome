open Base
open Base_quickcheck
include
  struct
    module Base = struct  end
    module Base_quickcheck = struct  end
    module Quickcheckable = struct  end
  end
module Simple_reference =
  struct
    type t = bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator = quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer = quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker = quickcheck_shrinker_bool
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Dotted_reference =
  struct
    type t = Simple_reference.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator = Simple_reference.quickcheck_generator
        let _ = quickcheck_generator
        let quickcheck_observer = Simple_reference.quickcheck_observer
        let _ = quickcheck_observer
        let quickcheck_shrinker = Simple_reference.quickcheck_shrinker
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Nonrec_reference =
  struct
    open Dotted_reference
    type nonrec t = t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator = quickcheck_generator
        let _ = quickcheck_generator
        let quickcheck_observer = quickcheck_observer
        let _ = quickcheck_observer
        let quickcheck_shrinker = quickcheck_shrinker
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Application_of_polymorphic_type =
  struct
    type t = bool option[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          quickcheck_generator_option quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          quickcheck_observer_option quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          quickcheck_shrinker_option quickcheck_shrinker_bool
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Tuple =
  struct
    type t = (bool * unit option)[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__007_ ->
               fun ~random:_random__008_ ->
                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                     quickcheck_generator_bool ~size:_size__007_
                     ~random:_random__008_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      (quickcheck_generator_option quickcheck_generator_unit)
                      ~size:_size__007_ ~random:_random__008_)))
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun (_x__003_, _x__004_) ->
               fun ~size:_size__005_ ->
                 fun ~hash:_hash__006_ ->
                   let _hash__006_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__003_ ~size:_size__005_
                       ~hash:_hash__006_ in
                   let _hash__006_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       (quickcheck_observer_option quickcheck_observer_unit)
                       _x__004_ ~size:_size__005_ ~hash:_hash__006_ in
                   _hash__006_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun (_x__001_, _x__002_) ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       quickcheck_shrinker_bool _x__001_)
                    ~f:(fun _x__001_ -> (_x__001_, _x__002_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      (quickcheck_shrinker_option quickcheck_shrinker_unit)
                      _x__002_) ~f:(fun _x__002_ -> (_x__001_, _x__002_))])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_variant =
  struct
    type t =
      [ `A  | `B  | `C of bool  | `D of bool  | `E of (bool * unit option) 
      | `F of (bool * unit option) ][@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__032_ -> fun ~random:_random__033_ -> `A)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__034_ -> fun ~random:_random__035_ -> `B)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__036_ ->
                    fun ~random:_random__037_ ->
                      `C
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           quickcheck_generator_bool ~size:_size__036_
                           ~random:_random__037_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__038_ ->
                    fun ~random:_random__039_ ->
                      `D
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           quickcheck_generator_bool ~size:_size__038_
                           ~random:_random__039_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__042_ ->
                    fun ~random:_random__043_ ->
                      `E
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                              (fun ~size:_size__040_ ->
                                 fun ~random:_random__041_ ->
                                   ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                       quickcheck_generator_bool
                                       ~size:_size__040_
                                       ~random:_random__041_),
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                        (quickcheck_generator_option
                                           quickcheck_generator_unit)
                                        ~size:_size__040_
                                        ~random:_random__041_))))
                           ~size:_size__042_ ~random:_random__043_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__046_ ->
                    fun ~random:_random__047_ ->
                      `F
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                              (fun ~size:_size__044_ ->
                                 fun ~random:_random__045_ ->
                                   ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                       quickcheck_generator_bool
                                       ~size:_size__044_
                                       ~random:_random__045_),
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                        (quickcheck_generator_option
                                           quickcheck_generator_unit)
                                        ~size:_size__044_
                                        ~random:_random__045_))))
                           ~size:_size__046_ ~random:_random__047_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__017_ ->
               fun ~size:_size__018_ ->
                 fun ~hash:_hash__019_ ->
                   match _x__017_ with
                   | `A ->
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__019_ 65 in
                       _hash__019_
                   | `B ->
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__019_ 66 in
                       _hash__019_
                   | `C _x__020_ ->
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__019_ 67 in
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__020_
                           ~size:_size__018_ ~hash:_hash__019_ in
                       _hash__019_
                   | `D _x__021_ ->
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__019_ 68 in
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__021_
                           ~size:_size__018_ ~hash:_hash__019_ in
                       _hash__019_
                   | `E _x__026_ ->
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__019_ 69 in
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                              (fun (_x__022_, _x__023_) ->
                                 fun ~size:_size__024_ ->
                                   fun ~hash:_hash__025_ ->
                                     let _hash__025_ =
                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                         quickcheck_observer_bool _x__022_
                                         ~size:_size__024_ ~hash:_hash__025_ in
                                     let _hash__025_ =
                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                         (quickcheck_observer_option
                                            quickcheck_observer_unit)
                                         _x__023_ ~size:_size__024_
                                         ~hash:_hash__025_ in
                                     _hash__025_)) _x__026_ ~size:_size__018_
                           ~hash:_hash__019_ in
                       _hash__019_
                   | `F _x__031_ ->
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__019_ 70 in
                       let _hash__019_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                              (fun (_x__027_, _x__028_) ->
                                 fun ~size:_size__029_ ->
                                   fun ~hash:_hash__030_ ->
                                     let _hash__030_ =
                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                         quickcheck_observer_bool _x__027_
                                         ~size:_size__029_ ~hash:_hash__030_ in
                                     let _hash__030_ =
                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                         (quickcheck_observer_option
                                            quickcheck_observer_unit)
                                         _x__028_ ~size:_size__029_
                                         ~hash:_hash__030_ in
                                     _hash__030_)) _x__031_ ~size:_size__018_
                           ~hash:_hash__019_ in
                       _hash__019_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | `A -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | `B -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | `C _x__009_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__009_)
                      ~f:(fun _x__009_ -> `C _x__009_)]
             | `D _x__010_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__010_)
                      ~f:(fun _x__010_ -> `D _x__010_)]
             | `E _x__011_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                            (fun (_x__012_, _x__013_) ->
                               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                 [Ppx_quickcheck_runtime.Base.Sequence.map
                                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                       quickcheck_shrinker_bool _x__012_)
                                    ~f:(fun _x__012_ -> (_x__012_, _x__013_));
                                 Ppx_quickcheck_runtime.Base.Sequence.map
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                      (quickcheck_shrinker_option
                                         quickcheck_shrinker_unit) _x__013_)
                                   ~f:(fun _x__013_ -> (_x__012_, _x__013_))]))
                         _x__011_) ~f:(fun _x__011_ -> `E _x__011_)]
             | `F _x__014_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                            (fun (_x__015_, _x__016_) ->
                               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                 [Ppx_quickcheck_runtime.Base.Sequence.map
                                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                       quickcheck_shrinker_bool _x__015_)
                                    ~f:(fun _x__015_ -> (_x__015_, _x__016_));
                                 Ppx_quickcheck_runtime.Base.Sequence.map
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                      (quickcheck_shrinker_option
                                         quickcheck_shrinker_unit) _x__016_)
                                   ~f:(fun _x__016_ -> (_x__015_, _x__016_))]))
                         _x__014_) ~f:(fun _x__014_ -> `F _x__014_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Inherit_poly_variant =
  struct
    type t = [ `X  | Poly_variant.t | `Z of unit option ][@@deriving
                                                           quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__055_ -> fun ~random:_random__056_ -> `X)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__057_ ->
                    fun ~random:_random__058_ ->
                      (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                         Poly_variant.quickcheck_generator ~size:_size__057_
                         ~random:_random__058_ : Poly_variant.t  :> [ `X 
                                                                    | Poly_variant.t
                                                                    | `Z of
                                                                    unit
                                                                    option ]))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__059_ ->
                    fun ~random:_random__060_ ->
                      `Z
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           (quickcheck_generator_option
                              quickcheck_generator_unit) ~size:_size__059_
                           ~random:_random__060_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__050_ ->
               fun ~size:_size__051_ ->
                 fun ~hash:_hash__052_ ->
                   match _x__050_ with
                   | `X ->
                       let _hash__052_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__052_ 88 in
                       _hash__052_
                   | #Poly_variant.t as _x__053_ ->
                       let _hash__052_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           Poly_variant.quickcheck_observer _x__053_
                           ~size:_size__051_ ~hash:_hash__052_ in
                       _hash__052_
                   | `Z _x__054_ ->
                       let _hash__052_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__052_ 90 in
                       let _hash__052_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (quickcheck_observer_option
                              quickcheck_observer_unit) _x__054_
                           ~size:_size__051_ ~hash:_hash__052_ in
                       _hash__052_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | `X -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | #Poly_variant.t as _x__048_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         Poly_variant.quickcheck_shrinker _x__048_)
                      ~f:(fun _x__048_ ->
                            (_x__048_ : Poly_variant.t  :> [ `X 
                                                           | Poly_variant.t
                                                           | `Z of
                                                               unit option ]))]
             | `Z _x__049_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (quickcheck_shrinker_option quickcheck_shrinker_unit)
                         _x__049_) ~f:(fun _x__049_ -> `Z _x__049_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Record_type =
  struct
    type t = {
      x: bool ;
      y: unit option }[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__067_ ->
               fun ~random:_random__068_ ->
                 {
                   x =
                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                        quickcheck_generator_bool ~size:_size__067_
                        ~random:_random__068_);
                   y =
                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                        (quickcheck_generator_option
                           quickcheck_generator_unit) ~size:_size__067_
                        ~random:_random__068_)
                 })
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun { x = _x__063_; y = _x__064_ } ->
               fun ~size:_size__065_ ->
                 fun ~hash:_hash__066_ ->
                   let _hash__066_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__063_ ~size:_size__065_
                       ~hash:_hash__066_ in
                   let _hash__066_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       (quickcheck_observer_option quickcheck_observer_unit)
                       _x__064_ ~size:_size__065_ ~hash:_hash__066_ in
                   _hash__066_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun { x = _x__061_; y = _x__062_ } ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       quickcheck_shrinker_bool _x__061_)
                    ~f:(fun _x__061_ -> { x = _x__061_; y = _x__062_ });
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      (quickcheck_shrinker_option quickcheck_shrinker_unit)
                      _x__062_)
                   ~f:(fun _x__062_ -> { x = _x__061_; y = _x__062_ })])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Nullary_and_unary_variant =
  struct
    type t =
      | A 
      | B 
      | C of unit 
      | D of unit [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__076_ -> fun ~random:_random__077_ -> A)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__078_ -> fun ~random:_random__079_ -> B)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__080_ ->
                    fun ~random:_random__081_ ->
                      C
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           quickcheck_generator_unit ~size:_size__080_
                           ~random:_random__081_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__082_ ->
                    fun ~random:_random__083_ ->
                      D
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           quickcheck_generator_unit ~size:_size__082_
                           ~random:_random__083_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__071_ ->
               fun ~size:_size__072_ ->
                 fun ~hash:_hash__073_ ->
                   match _x__071_ with
                   | A ->
                       let _hash__073_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__073_ 0 in
                       _hash__073_
                   | B ->
                       let _hash__073_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__073_ 1 in
                       _hash__073_
                   | C _x__074_ ->
                       let _hash__073_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__073_ 2 in
                       let _hash__073_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_unit _x__074_
                           ~size:_size__072_ ~hash:_hash__073_ in
                       _hash__073_
                   | D _x__075_ ->
                       let _hash__073_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__073_ 3 in
                       let _hash__073_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_unit _x__075_
                           ~size:_size__072_ ~hash:_hash__073_ in
                       _hash__073_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | A -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | B -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | C _x__069_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_unit _x__069_)
                      ~f:(fun _x__069_ -> C _x__069_)]
             | D _x__070_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_unit _x__070_)
                      ~f:(fun _x__070_ -> D _x__070_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Binary_and_record_variant =
  struct
    type t =
      | A of bool * [ `X  | `Y  | `Z of unit ] 
      | B of bool * [ `X  | `Y  | `Z of unit ] 
      | C of {
      x: unit option ;
      mutable y: bool } 
      | D of {
      x: unit option ;
      mutable y: bool } [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__119_ ->
                     fun ~random:_random__120_ ->
                       A
                         ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                             quickcheck_generator_bool ~size:_size__119_
                             ~random:_random__120_),
                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                                 [(1.,
                                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                       (fun ~size:_size__113_ ->
                                          fun ~random:_random__114_ -> `X)));
                                 (1.,
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                      (fun ~size:_size__115_ ->
                                         fun ~random:_random__116_ -> `Y)));
                                 (1.,
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                      (fun ~size:_size__117_ ->
                                         fun ~random:_random__118_ ->
                                           `Z
                                             (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                quickcheck_generator_unit
                                                ~size:_size__117_
                                                ~random:_random__118_))))])
                              ~size:_size__119_ ~random:_random__120_)))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__127_ ->
                    fun ~random:_random__128_ ->
                      B
                        ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                            quickcheck_generator_bool ~size:_size__127_
                            ~random:_random__128_),
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                             (Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                                [(1.,
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                      (fun ~size:_size__121_ ->
                                         fun ~random:_random__122_ -> `X)));
                                (1.,
                                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                     (fun ~size:_size__123_ ->
                                        fun ~random:_random__124_ -> `Y)));
                                (1.,
                                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                     (fun ~size:_size__125_ ->
                                        fun ~random:_random__126_ ->
                                          `Z
                                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                               quickcheck_generator_unit
                                               ~size:_size__125_
                                               ~random:_random__126_))))])
                             ~size:_size__127_ ~random:_random__128_)))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__129_ ->
                    fun ~random:_random__130_ ->
                      C
                        {
                          x =
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                               (quickcheck_generator_option
                                  quickcheck_generator_unit)
                               ~size:_size__129_ ~random:_random__130_);
                          y =
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                               quickcheck_generator_bool ~size:_size__129_
                               ~random:_random__130_)
                        })));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__131_ ->
                    fun ~random:_random__132_ ->
                      D
                        {
                          x =
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                               (quickcheck_generator_option
                                  quickcheck_generator_unit)
                               ~size:_size__131_ ~random:_random__132_);
                          y =
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                               quickcheck_generator_bool ~size:_size__131_
                               ~random:_random__132_)
                        })))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__094_ ->
               fun ~size:_size__095_ ->
                 fun ~hash:_hash__096_ ->
                   match _x__094_ with
                   | A (_x__101_, _x__102_) ->
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__096_ 0 in
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__101_
                           ~size:_size__095_ ~hash:_hash__096_ in
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                              (fun _x__097_ ->
                                 fun ~size:_size__098_ ->
                                   fun ~hash:_hash__099_ ->
                                     match _x__097_ with
                                     | `X ->
                                         let _hash__099_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__099_ 88 in
                                         _hash__099_
                                     | `Y ->
                                         let _hash__099_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__099_ 89 in
                                         _hash__099_
                                     | `Z _x__100_ ->
                                         let _hash__099_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__099_ 90 in
                                         let _hash__099_ =
                                           Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                             quickcheck_observer_unit
                                             _x__100_ ~size:_size__098_
                                             ~hash:_hash__099_ in
                                         _hash__099_)) _x__102_
                           ~size:_size__095_ ~hash:_hash__096_ in
                       _hash__096_
                   | B (_x__107_, _x__108_) ->
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__096_ 1 in
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__107_
                           ~size:_size__095_ ~hash:_hash__096_ in
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                              (fun _x__103_ ->
                                 fun ~size:_size__104_ ->
                                   fun ~hash:_hash__105_ ->
                                     match _x__103_ with
                                     | `X ->
                                         let _hash__105_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__105_ 88 in
                                         _hash__105_
                                     | `Y ->
                                         let _hash__105_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__105_ 89 in
                                         _hash__105_
                                     | `Z _x__106_ ->
                                         let _hash__105_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__105_ 90 in
                                         let _hash__105_ =
                                           Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                             quickcheck_observer_unit
                                             _x__106_ ~size:_size__104_
                                             ~hash:_hash__105_ in
                                         _hash__105_)) _x__108_
                           ~size:_size__095_ ~hash:_hash__096_ in
                       _hash__096_
                   | C { x = _x__109_; y = _x__110_ } ->
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__096_ 2 in
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (quickcheck_observer_option
                              quickcheck_observer_unit) _x__109_
                           ~size:_size__095_ ~hash:_hash__096_ in
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__110_
                           ~size:_size__095_ ~hash:_hash__096_ in
                       _hash__096_
                   | D { x = _x__111_; y = _x__112_ } ->
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__096_ 3 in
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (quickcheck_observer_option
                              quickcheck_observer_unit) _x__111_
                           ~size:_size__095_ ~hash:_hash__096_ in
                       let _hash__096_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__112_
                           ~size:_size__095_ ~hash:_hash__096_ in
                       _hash__096_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | A (_x__084_, _x__085_) ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__084_)
                      ~f:(fun _x__084_ -> A (_x__084_, _x__085_));
                   Ppx_quickcheck_runtime.Base.Sequence.map
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                        (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                           (function
                            | `X ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | `Y ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | `Z _x__086_ ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  [Ppx_quickcheck_runtime.Base.Sequence.map
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                        quickcheck_shrinker_unit _x__086_)
                                     ~f:(fun _x__086_ -> `Z _x__086_)]))
                        _x__085_) ~f:(fun _x__085_ -> A (_x__084_, _x__085_))]
             | B (_x__087_, _x__088_) ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__087_)
                      ~f:(fun _x__087_ -> B (_x__087_, _x__088_));
                   Ppx_quickcheck_runtime.Base.Sequence.map
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                        (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                           (function
                            | `X ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | `Y ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | `Z _x__089_ ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  [Ppx_quickcheck_runtime.Base.Sequence.map
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                        quickcheck_shrinker_unit _x__089_)
                                     ~f:(fun _x__089_ -> `Z _x__089_)]))
                        _x__088_) ~f:(fun _x__088_ -> B (_x__087_, _x__088_))]
             | C { x = _x__090_; y = _x__091_ } ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (quickcheck_shrinker_option quickcheck_shrinker_unit)
                         _x__090_)
                      ~f:(fun _x__090_ -> C { x = _x__090_; y = _x__091_ });
                   Ppx_quickcheck_runtime.Base.Sequence.map
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                        quickcheck_shrinker_bool _x__091_)
                     ~f:(fun _x__091_ -> C { x = _x__090_; y = _x__091_ })]
             | D { x = _x__092_; y = _x__093_ } ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (quickcheck_shrinker_option quickcheck_shrinker_unit)
                         _x__092_)
                      ~f:(fun _x__092_ -> D { x = _x__092_; y = _x__093_ });
                   Ppx_quickcheck_runtime.Base.Sequence.map
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                        quickcheck_shrinker_bool _x__093_)
                     ~f:(fun _x__093_ -> D { x = _x__092_; y = _x__093_ })])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Simple_arrow =
  struct
    type t = unit option -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (quickcheck_observer_option quickcheck_observer_unit)
            quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (quickcheck_generator_option quickcheck_generator_unit)
            quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Named_arrow =
  struct
    type t = x:unit option -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.map
            ~f:(fun _f__135_ -> fun ~x:_x__136_ -> _f__135_ _x__136_)
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
               (quickcheck_observer_option quickcheck_observer_unit)
               quickcheck_generator_bool)
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.unmap
            ~f:(fun _f__133_ -> fun _x__134_ -> _f__133_ ~x:_x__134_)
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
               (quickcheck_generator_option quickcheck_generator_unit)
               quickcheck_observer_bool)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Optional_arrow =
  struct
    type t = ?x:unit option -> unit -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.map
            ~f:(fun _f__139_ -> fun ?x:_x__140_ -> _f__139_ _x__140_)
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
               (Ppx_quickcheck_runtime.Base_quickcheck.Observer.option
                  (quickcheck_observer_option quickcheck_observer_unit))
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                  quickcheck_observer_unit quickcheck_generator_bool))
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.unmap
            ~f:(fun _f__137_ -> fun _x__138_ -> _f__137_ ?x:_x__138_)
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.option
                  (quickcheck_generator_option quickcheck_generator_unit))
               (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                  quickcheck_generator_unit quickcheck_observer_bool))
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Curried_arrow =
  struct
    type t = unit option -> bool option -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (quickcheck_observer_option quickcheck_observer_unit)
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
               (quickcheck_observer_option quickcheck_observer_bool)
               quickcheck_generator_bool)
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (quickcheck_generator_option quickcheck_generator_unit)
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
               (quickcheck_generator_option quickcheck_generator_bool)
               quickcheck_observer_bool)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Simple_higher_order =
  struct
    type t = (unit option -> bool option) -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
               (quickcheck_generator_option quickcheck_generator_unit)
               (quickcheck_observer_option quickcheck_observer_bool))
            quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
               (quickcheck_observer_option quickcheck_observer_unit)
               (quickcheck_generator_option quickcheck_generator_bool))
            quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Named_higher_order =
  struct
    type t = (x:unit option -> bool option) -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.unmap
               ~f:(fun _f__143_ -> fun _x__144_ -> _f__143_ ~x:_x__144_)
               (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                  (quickcheck_generator_option quickcheck_generator_unit)
                  (quickcheck_observer_option quickcheck_observer_bool)))
            quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.map
               ~f:(fun _f__141_ -> fun ~x:_x__142_ -> _f__141_ _x__142_)
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                  (quickcheck_observer_option quickcheck_observer_unit)
                  (quickcheck_generator_option quickcheck_generator_bool)))
            quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Optional_higher_order =
  struct
    type t = (?x:unit option -> unit -> bool option) -> bool[@@deriving
                                                              quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.unmap
               ~f:(fun _f__147_ -> fun _x__148_ -> _f__147_ ?x:_x__148_)
               (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.option
                     (quickcheck_generator_option quickcheck_generator_unit))
                  (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                     quickcheck_generator_unit
                     (quickcheck_observer_option quickcheck_observer_bool))))
            quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.map
               ~f:(fun _f__145_ -> fun ?x:_x__146_ -> _f__145_ _x__146_)
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                  (Ppx_quickcheck_runtime.Base_quickcheck.Observer.option
                     (quickcheck_observer_option quickcheck_observer_unit))
                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                     quickcheck_observer_unit
                     (quickcheck_generator_option quickcheck_generator_bool))))
            quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_unary =
  struct
    type 'a t = 'a list[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : 'a t) -> ()
        let quickcheck_generator _generator__151_ =
          quickcheck_generator_list _generator__151_
        let _ = quickcheck_generator
        let quickcheck_observer _observer__150_ =
          quickcheck_observer_list _observer__150_
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__149_ =
          quickcheck_shrinker_list _shrinker__149_
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_of_unary =
  struct
    type t = bool Poly_unary.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_unary.quickcheck_generator quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_unary.quickcheck_observer quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_unary.quickcheck_shrinker quickcheck_shrinker_bool
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_binary =
  struct
    type ('a, 'b) t = ('a * 'b)[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : ('a, 'b) t) -> ()
        let quickcheck_generator _generator__162_ _generator__163_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__164_ ->
               fun ~random:_random__165_ ->
                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                     _generator__162_ ~size:_size__164_ ~random:_random__165_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      _generator__163_ ~size:_size__164_
                      ~random:_random__165_)))
        let _ = quickcheck_generator
        let quickcheck_observer _observer__156_ _observer__157_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun (_x__158_, _x__159_) ->
               fun ~size:_size__160_ ->
                 fun ~hash:_hash__161_ ->
                   let _hash__161_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__156_ _x__158_ ~size:_size__160_
                       ~hash:_hash__161_ in
                   let _hash__161_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__157_ _x__159_ ~size:_size__160_
                       ~hash:_hash__161_ in
                   _hash__161_)
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__152_ _shrinker__153_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun (_x__154_, _x__155_) ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       _shrinker__152_ _x__154_)
                    ~f:(fun _x__154_ -> (_x__154_, _x__155_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      _shrinker__153_ _x__155_)
                   ~f:(fun _x__155_ -> (_x__154_, _x__155_))])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_of_binary =
  struct
    type t = (bool, unit option) Poly_binary.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_binary.quickcheck_generator quickcheck_generator_bool
            (quickcheck_generator_option quickcheck_generator_unit)
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_binary.quickcheck_observer quickcheck_observer_bool
            (quickcheck_observer_option quickcheck_observer_unit)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_binary.quickcheck_shrinker quickcheck_shrinker_bool
            (quickcheck_shrinker_option quickcheck_shrinker_unit)
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_ternary =
  struct
    type ('a, 'b, 'c) t = ('a * 'b * 'c)[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : ('a, 'b, 'c) t) -> ()
        let quickcheck_generator _generator__180_ _generator__181_
          _generator__182_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__183_ ->
               fun ~random:_random__184_ ->
                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                     _generator__180_ ~size:_size__183_ ~random:_random__184_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      _generator__181_ ~size:_size__183_
                      ~random:_random__184_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      _generator__182_ ~size:_size__183_
                      ~random:_random__184_)))
        let _ = quickcheck_generator
        let quickcheck_observer _observer__172_ _observer__173_
          _observer__174_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun (_x__175_, _x__176_, _x__177_) ->
               fun ~size:_size__178_ ->
                 fun ~hash:_hash__179_ ->
                   let _hash__179_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__172_ _x__175_ ~size:_size__178_
                       ~hash:_hash__179_ in
                   let _hash__179_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__173_ _x__176_ ~size:_size__178_
                       ~hash:_hash__179_ in
                   let _hash__179_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__174_ _x__177_ ~size:_size__178_
                       ~hash:_hash__179_ in
                   _hash__179_)
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__166_ _shrinker__167_
          _shrinker__168_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun (_x__169_, _x__170_, _x__171_) ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       _shrinker__166_ _x__169_)
                    ~f:(fun _x__169_ -> (_x__169_, _x__170_, _x__171_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      _shrinker__167_ _x__170_)
                   ~f:(fun _x__170_ -> (_x__169_, _x__170_, _x__171_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      _shrinker__168_ _x__171_)
                   ~f:(fun _x__171_ -> (_x__169_, _x__170_, _x__171_))])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_of_ternary =
  struct
    type t =
      (bool, unit option, (unit option, bool) Poly_binary.t) Poly_ternary.t
    [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_ternary.quickcheck_generator quickcheck_generator_bool
            (quickcheck_generator_option quickcheck_generator_unit)
            (Poly_binary.quickcheck_generator
               (quickcheck_generator_option quickcheck_generator_unit)
               quickcheck_generator_bool)
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_ternary.quickcheck_observer quickcheck_observer_bool
            (quickcheck_observer_option quickcheck_observer_unit)
            (Poly_binary.quickcheck_observer
               (quickcheck_observer_option quickcheck_observer_unit)
               quickcheck_observer_bool)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_ternary.quickcheck_shrinker quickcheck_shrinker_bool
            (quickcheck_shrinker_option quickcheck_shrinker_unit)
            (Poly_binary.quickcheck_shrinker
               (quickcheck_shrinker_option quickcheck_shrinker_unit)
               quickcheck_shrinker_bool)
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_with_variance =
  struct
    type (-'a, +'b) t = ('b * ('a -> 'b))[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : ('a, 'b) t) -> ()
        let quickcheck_generator _observer__195_ _generator__196_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__197_ ->
               fun ~random:_random__198_ ->
                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                     _generator__196_ ~size:_size__197_ ~random:_random__198_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                         _observer__195_ _generator__196_) ~size:_size__197_
                      ~random:_random__198_)))
        let _ = quickcheck_generator
        let quickcheck_observer _generator__189_ _observer__190_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun (_x__191_, _x__192_) ->
               fun ~size:_size__193_ ->
                 fun ~hash:_hash__194_ ->
                   let _hash__194_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__190_ _x__191_ ~size:_size__193_
                       ~hash:_hash__194_ in
                   let _hash__194_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                          _generator__189_ _observer__190_) _x__192_
                       ~size:_size__193_ ~hash:_hash__194_ in
                   _hash__194_)
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__185_ _shrinker__186_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun (_x__187_, _x__188_) ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       _shrinker__186_ _x__187_)
                    ~f:(fun _x__187_ -> (_x__187_, _x__188_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
                      _x__188_) ~f:(fun _x__188_ -> (_x__187_, _x__188_))])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_with_variance =
  struct
    type t = (bool, unit option) Poly_with_variance.t
    let quickcheck_generator =
      Poly_with_variance.quickcheck_generator quickcheck_observer_bool
        (quickcheck_generator_option quickcheck_generator_unit)
    let quickcheck_observer =
      Poly_with_variance.quickcheck_observer quickcheck_generator_bool
        (quickcheck_observer_option quickcheck_observer_unit)
    let quickcheck_shrinker =
      Poly_with_variance.quickcheck_shrinker quickcheck_shrinker_bool
        (quickcheck_shrinker_option quickcheck_shrinker_unit)
    let _quickcheck_generator_with_custom =
      Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
        [(1.,
           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
              (fun ~size:_size__199_ ->
                 fun ~random:_random__200_ ->
                   `Foo
                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                        quickcheck_generator ~size:_size__199_
                        ~random:_random__200_))))]
  end
module Poly_with_phantom =
  struct
    type _ t = unit option[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : _ t) -> ()
        let quickcheck_generator _generator__206_ =
          quickcheck_generator_option quickcheck_generator_unit
        let _ = quickcheck_generator
        let quickcheck_observer _observer__204_ =
          quickcheck_observer_option quickcheck_observer_unit
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__202_ =
          quickcheck_shrinker_option quickcheck_shrinker_unit
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_with_phantom =
  struct
    type t = [ `phantom ] Poly_with_phantom.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_with_phantom.quickcheck_generator
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
               [(1.,
                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                     (fun ~size:_size__210_ ->
                        fun ~random:_random__211_ -> `phantom)))])
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_with_phantom.quickcheck_observer
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
               (fun _x__207_ ->
                  fun ~size:_size__208_ ->
                    fun ~hash:_hash__209_ ->
                      match _x__207_ with
                      | `phantom ->
                          let _hash__209_ =
                            Ppx_quickcheck_runtime.Base.hash_fold_int
                              _hash__209_ (-378691891) in
                          _hash__209_))
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_with_phantom.quickcheck_shrinker
            (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
               (function
                | `phantom ->
                    Ppx_quickcheck_runtime.Base.Sequence.round_robin []))
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Recursive =
  struct
    type t =
      | Leaf 
      | Node of t * t [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          let rec quickcheck_generator =
            lazy
              (let quickcheck_generator =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator in
               ignore quickcheck_generator;
               (let _pair__222_ =
                  (1.,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                       (fun ~size:_size__226_ ->
                          fun ~random:_random__227_ -> Leaf)))
                and _pair__223_ =
                  (1.,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                       ~f:(fun _size__219_ ->
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                               ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                        _size__219_)
                               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                  (fun ~size:_size__224_ ->
                                     fun ~random:_random__225_ ->
                                       Node
                                         ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                             quickcheck_generator
                                             ~size:_size__224_
                                             ~random:_random__225_),
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                              quickcheck_generator
                                              ~size:_size__224_
                                              ~random:_random__225_))))))) in
                let _gen__220_ =
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                    [_pair__222_]
                and _gen__221_ =
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                    [_pair__222_; _pair__223_] in
                Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                  ~f:(function | 0 -> _gen__220_ | _ -> _gen__221_))) in
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
            quickcheck_generator
        let _ = quickcheck_generator
        let quickcheck_observer =
          let rec quickcheck_observer =
            lazy
              (let quickcheck_observer =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer in
               ignore quickcheck_observer;
               Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                 (fun _x__214_ ->
                    fun ~size:_size__215_ ->
                      fun ~hash:_hash__216_ ->
                        match _x__214_ with
                        | Leaf ->
                            let _hash__216_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__216_ 0 in
                            _hash__216_
                        | Node (_x__217_, _x__218_) ->
                            let _hash__216_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__216_ 1 in
                            let _hash__216_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer _x__217_
                                ~size:_size__215_ ~hash:_hash__216_ in
                            let _hash__216_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer _x__218_
                                ~size:_size__215_ ~hash:_hash__216_ in
                            _hash__216_)) in
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
            quickcheck_observer
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          let rec quickcheck_shrinker =
            lazy
              (let quickcheck_shrinker =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker in
               ignore quickcheck_shrinker;
               Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                 (function
                  | Leaf ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin []
                  | Node (_x__212_, _x__213_) ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin
                        [Ppx_quickcheck_runtime.Base.Sequence.map
                           (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                              quickcheck_shrinker _x__212_)
                           ~f:(fun _x__212_ -> Node (_x__212_, _x__213_));
                        Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker _x__213_)
                          ~f:(fun _x__213_ -> Node (_x__212_, _x__213_))])) in
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
            quickcheck_shrinker
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Recursive_with_indirect_base_case =
  struct
    type t = {
      children: t list }[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          let rec quickcheck_generator =
            lazy
              (let quickcheck_generator =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator in
               ignore quickcheck_generator;
               Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__232_ ->
                    fun ~random:_random__233_ ->
                      {
                        children =
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                             (quickcheck_generator_list quickcheck_generator)
                             ~size:_size__232_ ~random:_random__233_)
                      })) in
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
            quickcheck_generator
        let _ = quickcheck_generator
        let quickcheck_observer =
          let rec quickcheck_observer =
            lazy
              (let quickcheck_observer =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer in
               ignore quickcheck_observer;
               Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                 (fun { children = _x__229_ } ->
                    fun ~size:_size__230_ ->
                      fun ~hash:_hash__231_ ->
                        let _hash__231_ =
                          Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                            (quickcheck_observer_list quickcheck_observer)
                            _x__229_ ~size:_size__230_ ~hash:_hash__231_ in
                        _hash__231_)) in
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
            quickcheck_observer
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          let rec quickcheck_shrinker =
            lazy
              (let quickcheck_shrinker =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker in
               ignore quickcheck_shrinker;
               Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                 (fun { children = _x__228_ } ->
                    Ppx_quickcheck_runtime.Base.Sequence.round_robin
                      [Ppx_quickcheck_runtime.Base.Sequence.map
                         (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                            (quickcheck_shrinker_list quickcheck_shrinker)
                            _x__228_)
                         ~f:(fun _x__228_ -> { children = _x__228_ })])) in
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
            quickcheck_shrinker
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Mutually_recursive =
  struct
    type expr =
      | Constant of int64 
      | Operator of op 
      | Application of expr * args 
    and op = [ `plus  | `minus  | `abs ]
    and args = expr list[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : expr) -> ()
        let _ = fun (_ : op) -> ()
        let _ = fun (_ : args) -> ()
        let (quickcheck_generator_expr, quickcheck_generator_op,
             quickcheck_generator_args)
          =
          let rec quickcheck_generator_expr =
            lazy
              (let quickcheck_generator_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_expr
               and quickcheck_generator_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_op
               and quickcheck_generator_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_args in
               ignore quickcheck_generator_args;
               ignore quickcheck_generator_op;
               ignore quickcheck_generator_expr;
               (let _pair__251_ =
                  (1.,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                       (fun ~size:_size__258_ ->
                          fun ~random:_random__259_ ->
                            Constant
                              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                 quickcheck_generator_int64 ~size:_size__258_
                                 ~random:_random__259_))))
                and _pair__252_ =
                  (1.,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                       ~f:(fun _size__248_ ->
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                               ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                        _size__248_)
                               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                  (fun ~size:_size__254_ ->
                                     fun ~random:_random__255_ ->
                                       Operator
                                         (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                            quickcheck_generator_op
                                            ~size:_size__254_
                                            ~random:_random__255_))))))
                and _pair__253_ =
                  (1.,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                       ~f:(fun _size__248_ ->
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                               ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                        _size__248_)
                               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                  (fun ~size:_size__256_ ->
                                     fun ~random:_random__257_ ->
                                       Application
                                         ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                             quickcheck_generator_expr
                                             ~size:_size__256_
                                             ~random:_random__257_),
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                              quickcheck_generator_args
                                              ~size:_size__256_
                                              ~random:_random__257_))))))) in
                let _gen__249_ =
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                    [_pair__251_]
                and _gen__250_ =
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                    [_pair__251_; _pair__252_; _pair__253_] in
                Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                  ~f:(function | 0 -> _gen__249_ | _ -> _gen__250_)))
          and quickcheck_generator_op =
            lazy
              (let quickcheck_generator_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_expr
               and quickcheck_generator_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_op
               and quickcheck_generator_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_args in
               ignore quickcheck_generator_args;
               ignore quickcheck_generator_op;
               ignore quickcheck_generator_expr;
               Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                 [(1.,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                       (fun ~size:_size__260_ ->
                          fun ~random:_random__261_ -> `plus)));
                 (1.,
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                      (fun ~size:_size__262_ ->
                         fun ~random:_random__263_ -> `minus)));
                 (1.,
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                      (fun ~size:_size__264_ ->
                         fun ~random:_random__265_ -> `abs)))])
          and quickcheck_generator_args =
            lazy
              (let quickcheck_generator_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_expr
               and quickcheck_generator_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_op
               and quickcheck_generator_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator_args in
               ignore quickcheck_generator_args;
               ignore quickcheck_generator_op;
               ignore quickcheck_generator_expr;
               quickcheck_generator_list quickcheck_generator_expr) in
          ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
              quickcheck_generator_expr),
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
               quickcheck_generator_op),
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
               quickcheck_generator_args))
        let _ = quickcheck_generator_expr
        and _ = quickcheck_generator_op
        and _ = quickcheck_generator_args
        let (quickcheck_observer_expr, quickcheck_observer_op,
             quickcheck_observer_args)
          =
          let rec quickcheck_observer_expr =
            lazy
              (let quickcheck_observer_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_expr
               and quickcheck_observer_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_op
               and quickcheck_observer_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_args in
               ignore quickcheck_observer_args;
               ignore quickcheck_observer_op;
               ignore quickcheck_observer_expr;
               Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                 (fun _x__238_ ->
                    fun ~size:_size__239_ ->
                      fun ~hash:_hash__240_ ->
                        match _x__238_ with
                        | Constant _x__241_ ->
                            let _hash__240_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__240_ 0 in
                            let _hash__240_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer_int64 _x__241_
                                ~size:_size__239_ ~hash:_hash__240_ in
                            _hash__240_
                        | Operator _x__242_ ->
                            let _hash__240_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__240_ 1 in
                            let _hash__240_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer_op _x__242_
                                ~size:_size__239_ ~hash:_hash__240_ in
                            _hash__240_
                        | Application (_x__243_, _x__244_) ->
                            let _hash__240_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__240_ 2 in
                            let _hash__240_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer_expr _x__243_
                                ~size:_size__239_ ~hash:_hash__240_ in
                            let _hash__240_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer_args _x__244_
                                ~size:_size__239_ ~hash:_hash__240_ in
                            _hash__240_))
          and quickcheck_observer_op =
            lazy
              (let quickcheck_observer_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_expr
               and quickcheck_observer_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_op
               and quickcheck_observer_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_args in
               ignore quickcheck_observer_args;
               ignore quickcheck_observer_op;
               ignore quickcheck_observer_expr;
               Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                 (fun _x__245_ ->
                    fun ~size:_size__246_ ->
                      fun ~hash:_hash__247_ ->
                        match _x__245_ with
                        | `plus ->
                            let _hash__247_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__247_ (-900055206) in
                            _hash__247_
                        | `minus ->
                            let _hash__247_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__247_ 141066352 in
                            _hash__247_
                        | `abs ->
                            let _hash__247_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__247_ 4845682 in
                            _hash__247_))
          and quickcheck_observer_args =
            lazy
              (let quickcheck_observer_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_expr
               and quickcheck_observer_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_op
               and quickcheck_observer_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer_args in
               ignore quickcheck_observer_args;
               ignore quickcheck_observer_op;
               ignore quickcheck_observer_expr;
               quickcheck_observer_list quickcheck_observer_expr) in
          ((Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
              quickcheck_observer_expr),
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
               quickcheck_observer_op),
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
               quickcheck_observer_args))
        let _ = quickcheck_observer_expr
        and _ = quickcheck_observer_op
        and _ = quickcheck_observer_args
        let (quickcheck_shrinker_expr, quickcheck_shrinker_op,
             quickcheck_shrinker_args)
          =
          let rec quickcheck_shrinker_expr =
            lazy
              (let quickcheck_shrinker_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_expr
               and quickcheck_shrinker_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_op
               and quickcheck_shrinker_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_args in
               ignore quickcheck_shrinker_args;
               ignore quickcheck_shrinker_op;
               ignore quickcheck_shrinker_expr;
               Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                 (function
                  | Constant _x__234_ ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin
                        [Ppx_quickcheck_runtime.Base.Sequence.map
                           (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                              quickcheck_shrinker_int64 _x__234_)
                           ~f:(fun _x__234_ -> Constant _x__234_)]
                  | Operator _x__235_ ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin
                        [Ppx_quickcheck_runtime.Base.Sequence.map
                           (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                              quickcheck_shrinker_op _x__235_)
                           ~f:(fun _x__235_ -> Operator _x__235_)]
                  | Application (_x__236_, _x__237_) ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin
                        [Ppx_quickcheck_runtime.Base.Sequence.map
                           (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                              quickcheck_shrinker_expr _x__236_)
                           ~f:(fun _x__236_ ->
                                 Application (_x__236_, _x__237_));
                        Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker_args _x__237_)
                          ~f:(fun _x__237_ ->
                                Application (_x__236_, _x__237_))]))
          and quickcheck_shrinker_op =
            lazy
              (let quickcheck_shrinker_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_expr
               and quickcheck_shrinker_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_op
               and quickcheck_shrinker_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_args in
               ignore quickcheck_shrinker_args;
               ignore quickcheck_shrinker_op;
               ignore quickcheck_shrinker_expr;
               Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                 (function
                  | `plus ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin []
                  | `minus ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin []
                  | `abs ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin []))
          and quickcheck_shrinker_args =
            lazy
              (let quickcheck_shrinker_expr =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_expr
               and quickcheck_shrinker_op =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_op
               and quickcheck_shrinker_args =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker_args in
               ignore quickcheck_shrinker_args;
               ignore quickcheck_shrinker_op;
               ignore quickcheck_shrinker_expr;
               quickcheck_shrinker_list quickcheck_shrinker_expr) in
          ((Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
              quickcheck_shrinker_expr),
            (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
               quickcheck_shrinker_op),
            (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
               quickcheck_shrinker_args))
        let _ = quickcheck_shrinker_expr
        and _ = quickcheck_shrinker_op
        and _ = quickcheck_shrinker_args
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_recursive =
  struct
    type 'a t =
      | Zero 
      | Succ of 'a * 'a t [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : 'a t) -> ()
        let quickcheck_generator =
          let rec quickcheck_generator =
            lazy
              (let quickcheck_generator _recur__289_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   (lazy
                      (Ppx_quickcheck_runtime.Base.Lazy.force
                         quickcheck_generator _recur__289_)) in
               ignore quickcheck_generator;
               (fun _generator__279_ ->
                  let _pair__283_ =
                    (1.,
                      (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                         (fun ~size:_size__287_ ->
                            fun ~random:_random__288_ -> Zero)))
                  and _pair__284_ =
                    (1.,
                      (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                         ~f:(fun _size__280_ ->
                               Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                 ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                          _size__280_)
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                    (fun ~size:_size__285_ ->
                                       fun ~random:_random__286_ ->
                                         Succ
                                           ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                               _generator__279_
                                               ~size:_size__285_
                                               ~random:_random__286_),
                                             (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                (quickcheck_generator
                                                   _generator__279_)
                                                ~size:_size__285_
                                                ~random:_random__286_))))))) in
                  let _gen__281_ =
                    Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                      [_pair__283_]
                  and _gen__282_ =
                    Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                      [_pair__283_; _pair__284_] in
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                    Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                    ~f:(function | 0 -> _gen__281_ | _ -> _gen__282_))) in
          fun _recur__290_ ->
            Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
              (lazy
                 (Ppx_quickcheck_runtime.Base.Lazy.force quickcheck_generator
                    _recur__290_))
        let _ = quickcheck_generator
        let quickcheck_observer =
          let rec quickcheck_observer =
            lazy
              (let quickcheck_observer _recur__277_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   (lazy
                      (Ppx_quickcheck_runtime.Base.Lazy.force
                         quickcheck_observer _recur__277_)) in
               ignore quickcheck_observer;
               (fun _observer__271_ ->
                  Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                    (fun _x__272_ ->
                       fun ~size:_size__273_ ->
                         fun ~hash:_hash__274_ ->
                           match _x__272_ with
                           | Zero ->
                               let _hash__274_ =
                                 Ppx_quickcheck_runtime.Base.hash_fold_int
                                   _hash__274_ 0 in
                               _hash__274_
                           | Succ (_x__275_, _x__276_) ->
                               let _hash__274_ =
                                 Ppx_quickcheck_runtime.Base.hash_fold_int
                                   _hash__274_ 1 in
                               let _hash__274_ =
                                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                   _observer__271_ _x__275_ ~size:_size__273_
                                   ~hash:_hash__274_ in
                               let _hash__274_ =
                                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                   (quickcheck_observer _observer__271_)
                                   _x__276_ ~size:_size__273_
                                   ~hash:_hash__274_ in
                               _hash__274_))) in
          fun _recur__278_ ->
            Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
              (lazy
                 (Ppx_quickcheck_runtime.Base.Lazy.force quickcheck_observer
                    _recur__278_))
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          let rec quickcheck_shrinker =
            lazy
              (let quickcheck_shrinker _recur__269_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   (lazy
                      (Ppx_quickcheck_runtime.Base.Lazy.force
                         quickcheck_shrinker _recur__269_)) in
               ignore quickcheck_shrinker;
               (fun _shrinker__266_ ->
                  Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                    (function
                     | Zero ->
                         Ppx_quickcheck_runtime.Base.Sequence.round_robin []
                     | Succ (_x__267_, _x__268_) ->
                         Ppx_quickcheck_runtime.Base.Sequence.round_robin
                           [Ppx_quickcheck_runtime.Base.Sequence.map
                              (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                 _shrinker__266_ _x__267_)
                              ~f:(fun _x__267_ -> Succ (_x__267_, _x__268_));
                           Ppx_quickcheck_runtime.Base.Sequence.map
                             (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                (quickcheck_shrinker _shrinker__266_)
                                _x__268_)
                             ~f:(fun _x__268_ -> Succ (_x__267_, _x__268_))]))) in
          fun _recur__270_ ->
            Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
              (lazy
                 (Ppx_quickcheck_runtime.Base.Lazy.force quickcheck_shrinker
                    _recur__270_))
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_of_recursive =
  struct
    type t = bool Poly_recursive.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_recursive.quickcheck_generator quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_recursive.quickcheck_observer quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_recursive.quickcheck_shrinker quickcheck_shrinker_bool
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Extensions =
  struct
    type t = [ `A  | `B of (bool * unit option) ]
    let quickcheck_generator =
      Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
        [(1.,
           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
              (fun ~size:_size__291_ -> fun ~random:_random__292_ -> `A)));
        (1.,
          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
             (fun ~size:_size__295_ ->
                fun ~random:_random__296_ ->
                  `B
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                       (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                          (fun ~size:_size__293_ ->
                             fun ~random:_random__294_ ->
                               ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                   quickcheck_generator_bool
                                   ~size:_size__293_ ~random:_random__294_),
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                    (quickcheck_generator_option
                                       quickcheck_generator_unit)
                                    ~size:_size__293_ ~random:_random__294_))))
                       ~size:_size__295_ ~random:_random__296_))))]
    let quickcheck_observer =
      Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
        (fun _x__297_ ->
           fun ~size:_size__298_ ->
             fun ~hash:_hash__299_ ->
               match _x__297_ with
               | `A ->
                   let _hash__299_ =
                     Ppx_quickcheck_runtime.Base.hash_fold_int _hash__299_ 65 in
                   _hash__299_
               | `B _x__304_ ->
                   let _hash__299_ =
                     Ppx_quickcheck_runtime.Base.hash_fold_int _hash__299_ 66 in
                   let _hash__299_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                          (fun (_x__300_, _x__301_) ->
                             fun ~size:_size__302_ ->
                               fun ~hash:_hash__303_ ->
                                 let _hash__303_ =
                                   Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                     quickcheck_observer_bool _x__300_
                                     ~size:_size__302_ ~hash:_hash__303_ in
                                 let _hash__303_ =
                                   Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                     (quickcheck_observer_option
                                        quickcheck_observer_unit) _x__301_
                                     ~size:_size__302_ ~hash:_hash__303_ in
                                 _hash__303_)) _x__304_ ~size:_size__298_
                       ~hash:_hash__299_ in
                   _hash__299_)
    let quickcheck_shrinker =
      Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
        (function
         | `A -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
         | `B _x__305_ ->
             Ppx_quickcheck_runtime.Base.Sequence.round_robin
               [Ppx_quickcheck_runtime.Base.Sequence.map
                  (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                        (fun (_x__306_, _x__307_) ->
                           Ppx_quickcheck_runtime.Base.Sequence.round_robin
                             [Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_bool _x__306_)
                                ~f:(fun _x__306_ -> (_x__306_, _x__307_));
                             Ppx_quickcheck_runtime.Base.Sequence.map
                               (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                  (quickcheck_shrinker_option
                                     quickcheck_shrinker_unit) _x__307_)
                               ~f:(fun _x__307_ -> (_x__306_, _x__307_))]))
                     _x__305_) ~f:(fun _x__305_ -> `B _x__305_)])
  end
module Escaped =
  struct
    type t = (int * char * bool option)
    let quickcheck_generator =
      Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
        (fun ~size:_size__308_ ->
           fun ~random:_random__309_ ->
             ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                 Generator.small_strictly_positive_int ~size:_size__308_
                 ~random:_random__309_),
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                  quickcheck_generator_char ~size:_size__308_
                  ~random:_random__309_),
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                  (quickcheck_generator_option quickcheck_generator_bool)
                  ~size:_size__308_ ~random:_random__309_)))
    let quickcheck_observer =
      Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
        (fun (_x__310_, _x__311_, _x__312_) ->
           fun ~size:_size__313_ ->
             fun ~hash:_hash__314_ ->
               let _hash__314_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                   quickcheck_observer_int _x__310_ ~size:_size__313_
                   ~hash:_hash__314_ in
               let _hash__314_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                   Observer.opaque _x__311_ ~size:_size__313_
                   ~hash:_hash__314_ in
               let _hash__314_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                   (quickcheck_observer_option quickcheck_observer_bool)
                   _x__312_ ~size:_size__313_ ~hash:_hash__314_ in
               _hash__314_)
    let quickcheck_shrinker =
      Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
        (fun (_x__315_, _x__316_, _x__317_) ->
           Ppx_quickcheck_runtime.Base.Sequence.round_robin
             [Ppx_quickcheck_runtime.Base.Sequence.map
                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                   quickcheck_shrinker_int _x__315_)
                ~f:(fun _x__315_ -> (_x__315_, _x__316_, _x__317_));
             Ppx_quickcheck_runtime.Base.Sequence.map
               (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                  quickcheck_shrinker_char _x__316_)
               ~f:(fun _x__316_ -> (_x__315_, _x__316_, _x__317_));
             Ppx_quickcheck_runtime.Base.Sequence.map
               (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                  Shrinker.atomic _x__317_)
               ~f:(fun _x__317_ -> (_x__315_, _x__316_, _x__317_))])
  end
module Wildcard(Elt:sig type t val examples : t list end) =
  struct
    type t = Elt.t list
    let quickcheck_generator =
      Generator.list (Generator.of_list Elt.examples)
    let quickcheck_observer : t Observer.t =
      quickcheck_observer_list
        Ppx_quickcheck_runtime.Base_quickcheck.Observer.opaque
    let quickcheck_shrinker : t Shrinker.t =
      quickcheck_shrinker_list
        Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
  end
module Attribute_override =
  struct
    type t =
      | Null [@quickcheck.weight 0.1]
      | Text of
      ((string)[@quickcheck.generator
                 Generator.string_of Generator.char_lowercase])
      
      | Number of
      ((float)[@quickcheck.generator Generator.float_strictly_positive]) 
    [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(0.1,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__325_ -> fun ~random:_random__326_ -> Null)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__327_ ->
                    fun ~random:_random__328_ ->
                      Text
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           (Generator.string_of Generator.char_lowercase)
                           ~size:_size__327_ ~random:_random__328_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__329_ ->
                    fun ~random:_random__330_ ->
                      Number
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           Generator.float_strictly_positive
                           ~size:_size__329_ ~random:_random__330_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__320_ ->
               fun ~size:_size__321_ ->
                 fun ~hash:_hash__322_ ->
                   match _x__320_ with
                   | Null ->
                       let _hash__322_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__322_ 0 in
                       _hash__322_
                   | Text _x__323_ ->
                       let _hash__322_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__322_ 1 in
                       let _hash__322_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_string _x__323_
                           ~size:_size__321_ ~hash:_hash__322_ in
                       _hash__322_
                   | Number _x__324_ ->
                       let _hash__322_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__322_ 2 in
                       let _hash__322_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_float _x__324_
                           ~size:_size__321_ ~hash:_hash__322_ in
                       _hash__322_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | Null -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | Text _x__318_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_string _x__318_)
                      ~f:(fun _x__318_ -> Text _x__318_)]
             | Number _x__319_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_float _x__319_)
                      ~f:(fun _x__319_ -> Number _x__319_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Attribute_override_recursive =
  struct
    type t =
      | Leaf 
      | Node1 of t * int64 * t [@quickcheck.weight 0.5]
      | Node2 of t * int64 * t * int64 * t [@quickcheck.weight 0.25][@@deriving
                                                                    quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          let rec quickcheck_generator =
            lazy
              (let quickcheck_generator =
                 Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                   quickcheck_generator in
               ignore quickcheck_generator;
               (let _pair__353_ =
                  (1.,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                       (fun ~size:_size__360_ ->
                          fun ~random:_random__361_ -> Leaf)))
                and _pair__354_ =
                  (0.5,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                       ~f:(fun _size__350_ ->
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                               ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                        _size__350_)
                               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                  (fun ~size:_size__356_ ->
                                     fun ~random:_random__357_ ->
                                       Node1
                                         ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                             quickcheck_generator
                                             ~size:_size__356_
                                             ~random:_random__357_),
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                              quickcheck_generator_int64
                                              ~size:_size__356_
                                              ~random:_random__357_),
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                              quickcheck_generator
                                              ~size:_size__356_
                                              ~random:_random__357_)))))))
                and _pair__355_ =
                  (0.25,
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                       ~f:(fun _size__350_ ->
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                               ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                        _size__350_)
                               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                  (fun ~size:_size__358_ ->
                                     fun ~random:_random__359_ ->
                                       Node2
                                         ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                             quickcheck_generator
                                             ~size:_size__358_
                                             ~random:_random__359_),
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                              quickcheck_generator_int64
                                              ~size:_size__358_
                                              ~random:_random__359_),
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                              quickcheck_generator
                                              ~size:_size__358_
                                              ~random:_random__359_),
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                              quickcheck_generator_int64
                                              ~size:_size__358_
                                              ~random:_random__359_),
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                              quickcheck_generator
                                              ~size:_size__358_
                                              ~random:_random__359_))))))) in
                let _gen__351_ =
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                    [_pair__353_]
                and _gen__352_ =
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                    [_pair__353_; _pair__354_; _pair__355_] in
                Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                  ~f:(function | 0 -> _gen__351_ | _ -> _gen__352_))) in
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
            quickcheck_generator
        let _ = quickcheck_generator
        let quickcheck_observer =
          let rec quickcheck_observer =
            lazy
              (let quickcheck_observer =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                   quickcheck_observer in
               ignore quickcheck_observer;
               Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                 (fun _x__339_ ->
                    fun ~size:_size__340_ ->
                      fun ~hash:_hash__341_ ->
                        match _x__339_ with
                        | Leaf ->
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__341_ 0 in
                            _hash__341_
                        | Node1 (_x__342_, _x__343_, _x__344_) ->
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__341_ 1 in
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer _x__342_
                                ~size:_size__340_ ~hash:_hash__341_ in
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer_int64 _x__343_
                                ~size:_size__340_ ~hash:_hash__341_ in
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer _x__344_
                                ~size:_size__340_ ~hash:_hash__341_ in
                            _hash__341_
                        | Node2
                            (_x__345_, _x__346_, _x__347_, _x__348_,
                             _x__349_)
                            ->
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base.hash_fold_int
                                _hash__341_ 2 in
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer _x__345_
                                ~size:_size__340_ ~hash:_hash__341_ in
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer_int64 _x__346_
                                ~size:_size__340_ ~hash:_hash__341_ in
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer _x__347_
                                ~size:_size__340_ ~hash:_hash__341_ in
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer_int64 _x__348_
                                ~size:_size__340_ ~hash:_hash__341_ in
                            let _hash__341_ =
                              Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                quickcheck_observer _x__349_
                                ~size:_size__340_ ~hash:_hash__341_ in
                            _hash__341_)) in
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
            quickcheck_observer
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          let rec quickcheck_shrinker =
            lazy
              (let quickcheck_shrinker =
                 Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                   quickcheck_shrinker in
               ignore quickcheck_shrinker;
               Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                 (function
                  | Leaf ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin []
                  | Node1 (_x__331_, _x__332_, _x__333_) ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin
                        [Ppx_quickcheck_runtime.Base.Sequence.map
                           (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                              quickcheck_shrinker _x__331_)
                           ~f:(fun _x__331_ ->
                                 Node1 (_x__331_, _x__332_, _x__333_));
                        Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker_int64 _x__332_)
                          ~f:(fun _x__332_ ->
                                Node1 (_x__331_, _x__332_, _x__333_));
                        Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker _x__333_)
                          ~f:(fun _x__333_ ->
                                Node1 (_x__331_, _x__332_, _x__333_))]
                  | Node2 (_x__334_, _x__335_, _x__336_, _x__337_, _x__338_)
                      ->
                      Ppx_quickcheck_runtime.Base.Sequence.round_robin
                        [Ppx_quickcheck_runtime.Base.Sequence.map
                           (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                              quickcheck_shrinker _x__334_)
                           ~f:(fun _x__334_ ->
                                 Node2
                                   (_x__334_, _x__335_, _x__336_, _x__337_,
                                     _x__338_));
                        Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker_int64 _x__335_)
                          ~f:(fun _x__335_ ->
                                Node2
                                  (_x__334_, _x__335_, _x__336_, _x__337_,
                                    _x__338_));
                        Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker _x__336_)
                          ~f:(fun _x__336_ ->
                                Node2
                                  (_x__334_, _x__335_, _x__336_, _x__337_,
                                    _x__338_));
                        Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker_int64 _x__337_)
                          ~f:(fun _x__337_ ->
                                Node2
                                  (_x__334_, _x__335_, _x__336_, _x__337_,
                                    _x__338_));
                        Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker _x__338_)
                          ~f:(fun _x__338_ ->
                                Node2
                                  (_x__334_, _x__335_, _x__336_, _x__337_,
                                    _x__338_))])) in
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
            quickcheck_shrinker
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Deriving_from_wildcard =
  struct
    type _ transparent = string[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : _ transparent) -> ()
        let quickcheck_generator_transparent _generator__367_ =
          quickcheck_generator_string
        let _ = quickcheck_generator_transparent
        let quickcheck_observer_transparent _observer__365_ =
          quickcheck_observer_string
        let _ = quickcheck_observer_transparent
        let quickcheck_shrinker_transparent _shrinker__363_ =
          quickcheck_shrinker_string
        let _ = quickcheck_shrinker_transparent
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
    type 'a opaque = 'a option[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : 'a opaque) -> ()
        let quickcheck_generator_opaque _generator__370_ =
          quickcheck_generator_option _generator__370_
        let _ = quickcheck_generator_opaque
        let quickcheck_observer_opaque _observer__369_ =
          quickcheck_observer_option _observer__369_
        let _ = quickcheck_observer_opaque
        let quickcheck_shrinker_opaque _shrinker__368_ =
          quickcheck_shrinker_option _shrinker__368_
        let _ = quickcheck_shrinker_opaque
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
    let compare_opaque = compare_option
    let sexp_of_opaque = sexp_of_option
    let opaque_examples = [None; Some 0L; Some 1L]
  end
module Do_not_generate_clauses =
  struct
    module Cannot_generate =
      struct
        type t = bool option
        let all = None :: (List.map Bool.all ~f:Option.return)
        let compare = Option.compare Bool.compare
        let sexp_of_t = Option.sexp_of_t Bool.sexp_of_t
        let quickcheck_observer =
          quickcheck_observer_option quickcheck_observer_bool
        let quickcheck_shrinker =
          quickcheck_shrinker_option quickcheck_shrinker_bool
      end
    type t =
      | Can_generate of bool 
      | Cannot_generate of Cannot_generate.t [@quickcheck.do_not_generate ]
    [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__378_ ->
                     fun ~random:_random__379_ ->
                       Can_generate
                         (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                            quickcheck_generator_bool ~size:_size__378_
                            ~random:_random__379_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__373_ ->
               fun ~size:_size__374_ ->
                 fun ~hash:_hash__375_ ->
                   match _x__373_ with
                   | Can_generate _x__376_ ->
                       let _hash__375_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__375_ 0 in
                       let _hash__375_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__376_
                           ~size:_size__374_ ~hash:_hash__375_ in
                       _hash__375_
                   | Cannot_generate _x__377_ ->
                       let _hash__375_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__375_ 1 in
                       let _hash__375_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           Cannot_generate.quickcheck_observer _x__377_
                           ~size:_size__374_ ~hash:_hash__375_ in
                       _hash__375_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | Can_generate _x__371_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__371_)
                      ~f:(fun _x__371_ -> Can_generate _x__371_)]
             | Cannot_generate _x__372_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         Cannot_generate.quickcheck_shrinker _x__372_)
                      ~f:(fun _x__372_ -> Cannot_generate _x__372_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
    module Poly =
      struct
        type t =
          [ `Can_generate of bool 
          | `Cannot_generate of Cannot_generate.t
              [@quickcheck.do_not_generate ]][@@deriving quickcheck]
        include
          struct
            let _ = fun (_ : t) -> ()
            let quickcheck_generator =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                [(1.,
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                      (fun ~size:_size__387_ ->
                         fun ~random:_random__388_ ->
                           `Can_generate
                             (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                quickcheck_generator_bool ~size:_size__387_
                                ~random:_random__388_))))]
            let _ = quickcheck_generator
            let quickcheck_observer =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                (fun _x__382_ ->
                   fun ~size:_size__383_ ->
                     fun ~hash:_hash__384_ ->
                       match _x__382_ with
                       | `Can_generate _x__385_ ->
                           let _hash__384_ =
                             Ppx_quickcheck_runtime.Base.hash_fold_int
                               _hash__384_ (-895996764) in
                           let _hash__384_ =
                             Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                               quickcheck_observer_bool _x__385_
                               ~size:_size__383_ ~hash:_hash__384_ in
                           _hash__384_
                       | `Cannot_generate _x__386_ ->
                           let _hash__384_ =
                             Ppx_quickcheck_runtime.Base.hash_fold_int
                               _hash__384_ 501585681 in
                           let _hash__384_ =
                             Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                               Cannot_generate.quickcheck_observer _x__386_
                               ~size:_size__383_ ~hash:_hash__384_ in
                           _hash__384_)
            let _ = quickcheck_observer
            let quickcheck_shrinker =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                (function
                 | `Can_generate _x__380_ ->
                     Ppx_quickcheck_runtime.Base.Sequence.round_robin
                       [Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker_bool _x__380_)
                          ~f:(fun _x__380_ -> `Can_generate _x__380_)]
                 | `Cannot_generate _x__381_ ->
                     Ppx_quickcheck_runtime.Base.Sequence.round_robin
                       [Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             Cannot_generate.quickcheck_shrinker _x__381_)
                          ~f:(fun _x__381_ -> `Cannot_generate _x__381_)])
            let _ = quickcheck_shrinker
          end[@@ocaml.doc "@inline"][@@merlin.hide ]
      end
    module _ =
      struct
        type t =
          | A 
          | B of t [@quickcheck.do_not_generate ][@@deriving quickcheck]
        include
          struct
            let _ = fun (_ : t) -> ()
            let quickcheck_generator =
              let rec quickcheck_generator =
                lazy
                  (let quickcheck_generator =
                     Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                       quickcheck_generator in
                   ignore quickcheck_generator;
                   Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                     [(1.,
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                           (fun ~size:_size__394_ ->
                              fun ~random:_random__395_ -> A)))]) in
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                quickcheck_generator
            let _ = quickcheck_generator
            let quickcheck_observer =
              let rec quickcheck_observer =
                lazy
                  (let quickcheck_observer =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                       quickcheck_observer in
                   ignore quickcheck_observer;
                   Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                     (fun _x__390_ ->
                        fun ~size:_size__391_ ->
                          fun ~hash:_hash__392_ ->
                            match _x__390_ with
                            | A ->
                                let _hash__392_ =
                                  Ppx_quickcheck_runtime.Base.hash_fold_int
                                    _hash__392_ 0 in
                                _hash__392_
                            | B _x__393_ ->
                                let _hash__392_ =
                                  Ppx_quickcheck_runtime.Base.hash_fold_int
                                    _hash__392_ 1 in
                                let _hash__392_ =
                                  Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                    quickcheck_observer _x__393_
                                    ~size:_size__391_ ~hash:_hash__392_ in
                                _hash__392_)) in
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                quickcheck_observer
            let _ = quickcheck_observer
            let quickcheck_shrinker =
              let rec quickcheck_shrinker =
                lazy
                  (let quickcheck_shrinker =
                     Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                       quickcheck_shrinker in
                   ignore quickcheck_shrinker;
                   Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                     (function
                      | A ->
                          Ppx_quickcheck_runtime.Base.Sequence.round_robin []
                      | B _x__389_ ->
                          Ppx_quickcheck_runtime.Base.Sequence.round_robin
                            [Ppx_quickcheck_runtime.Base.Sequence.map
                               (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                  quickcheck_shrinker _x__389_)
                               ~f:(fun _x__389_ -> B _x__389_)])) in
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                quickcheck_shrinker
            let _ = quickcheck_shrinker
          end[@@ocaml.doc "@inline"][@@merlin.hide ]
      end
  end
