<?xml version="1.0"?>
<REFERENCE
><TITLE
>Reference</TITLE><REFENTRY
><REFMETA
><REFENTRYTITLE
>ocamlfind</REFENTRYTITLE><MANVOLNUM
>1</MANVOLNUM><REFMISCINFO
>The findlib package manager for OCaml</REFMISCINFO></REFMETA><REFNAMEDIV
ID="OCAMLFIND"
><REFNAME
>ocamlfind</REFNAME><REFPURPOSE
>[Command-line interface of the Package manager]</REFPURPOSE></REFNAMEDIV><REFSYNOPSISDIV
><TITLE
>SYNOPSIS</TITLE><SYNOPSIS
FORMAT="LINESPECIFIC"
>       <LINK
LINKEND="OCAMLFIND.QUERY"
>ocamlfind query [-help | other options] <REPLACEABLE
>package_name</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.OCAMLC"
>ocamlfind ocamlc [-help | other options] <REPLACEABLE
>file</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.OCAMLCP"
>ocamlfind ocamlcp [-help | other options] <REPLACEABLE
>file</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.OCAMLMKTOP"
>ocamlfind ocamlmktop [-help | other options] <REPLACEABLE
>file</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.OCAMLOPT"
>ocamlfind ocamlopt [-help | other options] <REPLACEABLE
>file</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.OCAMLDOC"
>ocamlfind ocamldoc [-help | other options] <REPLACEABLE
>file</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.OCAMLDEP"
>ocamlfind ocamldep [-help | other options] <REPLACEABLE
>file</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.OCAMLMKLIB"
>ocamlfind ocamlmklib [-help | other options] <REPLACEABLE
>file</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.OCAMLBROWSER"
>ocamlfind ocamlbrowser [-help | other options]</LINK>
   or: <LINK
LINKEND="OCAMLFIND.INSTALL"
>ocamlfind install [-help | other options] <REPLACEABLE
>package_name</REPLACEABLE> <REPLACEABLE
>file</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.REMOVE"
>ocamlfind remove [-help | other options] <REPLACEABLE
>package_name</REPLACEABLE></LINK>
   or: <LINK
LINKEND="OCAMLFIND.LIST"
>ocamlfind lint <REPLACEABLE
>META</REPLACEABLE></LINK>
   or: <LINK
LINKEND="OCAMLFIND.LIST"
>ocamlfind list [-describe]</LINK>
   or: <LINK
LINKEND="OCAMLFIND.PRINTPPX"
>ocamlfind printppx [-help | other options] <REPLACEABLE
>package_name</REPLACEABLE> ...</LINK>
   or: <LINK
LINKEND="OCAMLFIND.PRINTCONF"
>ocamlfind printconf [ variable ]</LINK>
   or: <LINK
LINKEND="OCAMLFIND.PKGCMD"
>ocamlfind <REPLACEABLE
>package</REPLACEABLE>/<REPLACEABLE
>command</REPLACEABLE> <REPLACEABLE
>arg</REPLACEABLE> ...</LINK>

Optional toolchain selection by:
  <LINK
LINKEND="OCAMLFIND.TOOLCHAIN"
>ocamlfind -toolchain <REPLACEABLE
>name</REPLACEABLE> ...</LINK></SYNOPSIS></REFSYNOPSISDIV><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.QUERY"
></ANCHOR>
  THE "query" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind query [ -predicates <REPLACEABLE
>p</REPLACEABLE>  | 
                  -format <REPLACEABLE
>f</REPLACEABLE> |
                  -long-format | -l |
                  -i-format |
                  -l-format | 
                  -a-format |
                  -o-format | 
	          -p-format |
                  -prefix <REPLACEABLE
>p</REPLACEABLE> |
                  -separator <REPLACEABLE
>s</REPLACEABLE> | 
                  -suffix <REPLACEABLE
>s</REPLACEABLE> |
                  -pp |
                  -descendants | -d |
                  -recursive  | -r
                  -qe | -qo] <REPLACEABLE
>package</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
> This command looks packages up, sorts them optionally, and
prints attributes of them. If the option -recursive (short: -r) is not
specified, exactly the packages given on the command line are looked
up; if -recursive is present, the packages and all their ancestors, or
if -descendants (short: -d) is present, too, all their descendants are printed.</PARA><PARA
>Package lookup and the selection of the attributes of the packages can
be modified by specifying predicates; without a -predicates option the
empty set of predicates is used. Note that even the lookup is
influenced by the set of actual predicates as the "requires" variables
may be conditional.</PARA><PARA
>What is printed about a package depends on the specified format; there
are a number of options that modify the format. Some formats denote
sets of values (such as -format %a), in which case multiple output
records are printed for every package. (It is even possible to specify
formats denoting the Cartesian product of sets, such as -format %a%o,
but this does not make sense.) Before the first output record the
prefix is printed, and the suffix after the last record. Between two
records the separator is printed.</PARA></REFSECT2><REFSECT2
><TITLE
>Options</TITLE><VARIABLELIST
><VARLISTENTRY
><TERM
>-predicates <REPLACEABLE
>p</REPLACEABLE></TERM><LISTITEM
><PARA
>Sets the set of actual predicates. The argument
  <REPLACEABLE
>p</REPLACEABLE> is a list of predicate names separated
  by commas and/or whitespace. If multiple -predicates options are
  given, the union of all specified sets is effectively used.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-format <REPLACEABLE
>f</REPLACEABLE></TERM><LISTITEM
><PARA
>Sets the format to the string
  <REPLACEABLE
>f</REPLACEABLE>. Characters preceded by a percent sign
  are interpreted as placeholders; all other characters mean
  themselves. The defined placeholders are listed below.
  The default format is "%d".</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-long-format or -l</TERM><LISTITEM
><PARA
>Sets the format such that all relevant variables are printed.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-i-format</TERM><LISTITEM
><PARA
>Same as -format "-I %d", i.e. directory options for ocamlc are printed.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-l-format</TERM><LISTITEM
><PARA
>Same as -format "-ccopt -L%d", i.e. directory options for the
linker backend are printed.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-a-format</TERM><LISTITEM
><PARA
>Same as -format "%+a", i.e. archive file names are printed.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-o-format</TERM><LISTITEM
><PARA
>Same as -format "%o", i.e. linker options are printed.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-p-format</TERM><LISTITEM
><PARA
>Same as -format "%p", i.e. package names are printed.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-prefix <REPLACEABLE
>p</REPLACEABLE></TERM><LISTITEM
><PARA
>Sets the prefix that is printed before the first output record
  to the given string. The default prefix is the empty string.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-suffix <REPLACEABLE
>s</REPLACEABLE></TERM><LISTITEM
><PARA
>Sets the suffix that is printed after the last output record
  to the given string. The default suffix is the empty string.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-separator <REPLACEABLE
>s</REPLACEABLE></TERM><LISTITEM
><PARA
>Sets the separator that is printed between output records to
  the given string. The default separator is a linefeed character.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-recursive or -r</TERM><LISTITEM
><PARA
>Not only the packages given on the command line are queried
  but also all ancestors or descendants. If the option -descendants is
  specified, too, the descendants are printed, otherwise the
  ancestors. The packages are topologically sorted.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-descendants -d</TERM><LISTITEM
><PARA
>Instead of the ancestors the descendants of the
  given packages are queried. This option implies <LITERAL
MOREINFO="NONE"
>-recursive</LITERAL>.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-pp</TERM><LISTITEM
><PARA
>Query preprocessor packages (camlp4 syntax extensions). Normally
it is not needed to set -predicates, except you need the archives (then add
-predicates byte). This option implies <LITERAL
MOREINFO="NONE"
>-recursive</LITERAL>.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-qe</TERM><LISTITEM
><PARA
>Do not print most errors to stderr, just set the exit code</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-qo</TERM><LISTITEM
><PARA
>Do not print the regular output.</PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2><REFSECT2
><TITLE
>Placeholders meaningful in the -format option</TITLE><VARIABLELIST
><VARLISTENTRY
><TERM
>%%</TERM><LISTITEM
><PARA
>Replaced by a single percent sign</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%p</TERM><LISTITEM
><PARA
>Replaced by the package name</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%d</TERM><LISTITEM
><PARA
>Replaced by the package directory</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%m</TERM><LISTITEM
><PARA
>Replaced by the path to the META file (new since findlib-1.6)</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%D</TERM><LISTITEM
><PARA
>Replaced by the package description</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%v</TERM><LISTITEM
><PARA
>Replaced by the version string</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%a</TERM><LISTITEM
><PARA
>Replaced by the archive filename. If there is more
  than one archive, a separate output record is printed for every archive.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%+a</TERM><LISTITEM
><PARA
>Like %a, but the filenames are converted to absolute
  paths ("+" and "@" notations are resolved)</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%A</TERM><LISTITEM
><PARA
>Replaced by the list of archive filenames.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%+A</TERM><LISTITEM
><PARA
>Like %A, but the filenames are converted to absolute
  paths ("+" and "@" notations are resolved)</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%o</TERM><LISTITEM
><PARA
>Replaced by one linker option. If there is more than
  one option, a separate output record is printed for every option.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%O</TERM><LISTITEM
><PARA
>Replaced by the list of linker options.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>%(<REPLACEABLE
>property</REPLACEABLE>)</TERM><LISTITEM
><PARA
>Replaced by the value of the property named in parentheses,
or the empty string if not defined.</PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.OCAMLC"
></ANCHOR>
  <ANCHOR
ID="OCAMLFIND.OCAMLCP"
></ANCHOR>
  <ANCHOR
ID="OCAMLFIND.OCAMLOPT"
></ANCHOR>
  <ANCHOR
ID="OCAMLFIND.OCAMLMKTOP"
></ANCHOR>
  THE SUBCOMMANDS "ocamlc", "ocamlcp", "ocamlopt", and "ocamlmktop"</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind ( ocamlc | ocamlcp | ocamlopt | ocamlmktop )
          [ -package <REPLACEABLE
>package-name-list</REPLACEABLE> |
            -linkpkg |
	    -predicates <REPLACEABLE
>pred-name-list</REPLACEABLE> |
            -dontlink <REPLACEABLE
>package-name-list</REPLACEABLE> |
	    -syntax <REPLACEABLE
>pred-name-list</REPLACEABLE> |
            -ppopt <REPLACEABLE
>camlp4-arg</REPLACEABLE> |
            -ppxopt <REPLACEABLE
>package</REPLACEABLE>,<REPLACEABLE
>arg</REPLACEABLE> |
            -dllpath-pkg <REPLACEABLE
>package-name-list</REPLACEABLE> |
            -dllpath-all |
	    -passopt <REPLACEABLE
>arg</REPLACEABLE> |
            -passrest <REPLACEABLE
>arg...</REPLACEABLE> |
            -only-show |
	    <REPLACEABLE
>standard-option</REPLACEABLE> ]
          <REPLACEABLE
>file</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>These subcommands are drivers for the compilers with the same names,
i.e. "ocamlfind ocamlc" is a driver for "ocamlc", and so on. The
subcommands understand all documented options of the compilers (here
called <REPLACEABLE
>standard-options</REPLACEABLE>), but also a few
more options. If these subcommands are invoked only with standard
options, they behave as if the underlying compiler had been called
directly. The extra options modify this.</PARA><PARA
>Internally, these subcommands transform the given list of options and
file arguments into an invocation of the driven compiler. This
transformation only adds options and files, and the relative order of
the options and files passed directly is unchanged.</PARA><PARA
>If there are -package options, additional directory search specifiers
will be included ("-I", and "-ccopt -I"), such that files of all named
packages and all ancestors can be found.</PARA><PARA
>The -linkpkg option causes that the packages listed in the -package
options and all necessary ancestors are linked in. This means that the
archive files implementing the packages are inserted into the list of
file arguments.</PARA><PARA
>As the package database is queried a set of predicates is needed. Most
predicates are set automatically, see below, but additional predicates
can be given by a -predicates option.</PARA><PARA
>If there is a <LITERAL
MOREINFO="NONE"
>-syntax</LITERAL> option, the drivers assume that
a preprocessor is to be used. In this case, the preprocessor command
is built first in a preprocessor stage, and this command is passed to the
compiler using the <LITERAL
MOREINFO="NONE"
>-pp</LITERAL> option. The set of predicates
in the preprocessor stage is different from the set in the compiler/linker
stage.</PARA></REFSECT2><REFSECT2
><TITLE
>Options for compiling and linking</TITLE><PARA
>Here, only the additional options not interpreted by the compiler but
by the driver itself, and options with additional effects are explained.
Some options are only meaningful for the preprocessor call, and are
explained below.</PARA><VARIABLELIST
><VARLISTENTRY
><TERM
>-package <REPLACEABLE
>package-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>Adds the listed package names to the set of included
  packages. The package names may be separated by commas and/or
  whitespace. In the transformed command, for every package of the set
  of included packages and for any ancestor a directory search option
  is inserted after the already given options. This means that
  "-I" and "-ccopt -I" options are added for every package directory.
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-linkpkg</TERM><LISTITEM
><PARA
>Causes that in the transformed command all archives
  of the packages specified by -packages and all their ancestors are
  added to the file arguments. More precisely, these archives are
  inserted before the first given file argument. Furthermore, "-ccopt
  -L" options for all package directories, and the linker options of
  the selected packages are added, too. Note that the archives are
  inserted in topological order while the linker options are added in
  reverse toplogical order.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-predicates <REPLACEABLE
>pred-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>Adds the given predicates to the set of actual
  predicates. The predicates must be separated by commas and/or
  whitespace. </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-dontlink <REPLACEABLE
>package-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>This option modifies the behaviour of
  -linkpkg. Packages specified here and all ancestors are not linked
  in. Again the packages are separated by commas and/or whitespace.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-dllpath-pkg <REPLACEABLE
>package-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>For these packages <LITERAL
MOREINFO="NONE"
>-dllpath</LITERAL> options
  are added to the compiler command. This may be useful when the ld.conf
  file is not properly configured.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-dllpath-all</TERM><LISTITEM
><PARA
>For all linked packages <LITERAL
MOREINFO="NONE"
>-dllpath</LITERAL> options
  are added to the compiler command. This may be useful when the ld.conf
  file is not properly configured.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-passopt <REPLACEABLE
>arg</REPLACEABLE></TERM><LISTITEM
><PARA
>The argument <REPLACEABLE
>arg</REPLACEABLE> is
  passed directly to the underlying compiler. This is needed to
  specify undocumented compiler options.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-passrest <REPLACEABLE
>arg...</REPLACEABLE></TERM><LISTITEM
><PARA
>All following arguments <REPLACEABLE
>arg...</REPLACEABLE> are
  passed directly to the underlying compiler. This is needed to
  specify undocumented compiler options.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-only-show</TERM><LISTITEM
><PARA
>Only prints the constructed command (ocamlc/ocamlopt) to
  stdout, but does not execute the command. (This is for the unlikely event
  that you need a wrapper around ocamlfind.)</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-verbose</TERM><LISTITEM
><PARA
>This standard option is interpreted by the driver, too.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-thread</TERM><LISTITEM
><PARA
>This standard option causes that the predicate "mt"
  is added to the set of actual predicates. If POSIX threads are available,
  the predicate "mt_posix" is selected, too. If only VM threads are
  available, the predicate "mt_vm" is included into the set, and the
  compiler switch is changed into -vmthread.</PARA><PARA
>Note that the presence of the "mt" predicate triggers special
fixup of the dependency graph (see below).</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-vmthread</TERM><LISTITEM
><PARA
>This standard option causes that the predicates "mt"
  and "mt_vm" are added to the set of actual predicates.</PARA><PARA
>Note that the presence of the "mt" predicate triggers special
fixup of the dependency graph (see below).</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-p</TERM><LISTITEM
><PARA
>This standard option of "ocamlopt" causes that the
  predicate "gprof" is added to the set of actual predicates.</PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2><REFSECT2
><TITLE
>Options for preprocessing</TITLE><PARA
>The options relevant for the preprocessor are the following:</PARA><VARIABLELIST
><VARLISTENTRY
><TERM
>-package <REPLACEABLE
>package-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>These packages are considered while looking up the
  preprocessor arguments. (It does not cause problems that the same
  -package option is used for this purpose, because the set of predicates
  is different.) It is recommended to mention at least <LITERAL
MOREINFO="NONE"
>camlp4</LITERAL>
  here if the preprocessor is going to be used.
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-syntax <REPLACEABLE
>pred-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>These predicates are assumed to be true in addition
  to the standard preprocessor predicates. See below for a list.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-ppopt <REPLACEABLE
>camlp4-arg</REPLACEABLE></TERM><LISTITEM
><PARA
>This argument is passed to the camlp4 call.
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-ppxopt <REPLACEABLE
>package</REPLACEABLE>,<REPLACEABLE
>arg</REPLACEABLE></TERM><LISTITEM
><PARA
>Add <REPLACEABLE
>arg</REPLACEABLE> to the ppx
      preprocessor invocation specified via the "ppx" property in
      the META file of <REPLACEABLE
>package</REPLACEABLE>.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2><REFSECT2
><TITLE
>Predicates for compiling and linking</TITLE><VARIABLELIST
><VARLISTENTRY
><TERM
>byte</TERM><LISTITEM
><PARA
>The "byte" predicate means that one of the bytecode compilers is
used. It is automatically included into the predicate set if the
"ocamlc", "ocamlcp", or "ocamlmktop" compiler is used.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>native</TERM><LISTITEM
><PARA
>The "native" predicate means that the native compiler is used. It is
automatically included into the predicate set if the "ocamlopt"
compiler is used.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>toploop</TERM><LISTITEM
><PARA
>The "toploop" predicate means that the toploop is available in the
linked program. This predicate is only set when the toploop is actually
being executed, not when the toploop is created (this changed in version
1.0.4 of findlib).</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>create_toploop</TERM><LISTITEM
><PARA
>This predicate means that a toploop is being created (using
ocamlmktop).</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>mt</TERM><LISTITEM
><PARA
>The "mt" predicate means that the program is multi-threaded. It is
automatically included into the predicate set if the -thread option is
given. </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>mt_posix</TERM><LISTITEM
><PARA
>The "mt_posix" predicate means that in the case "mt" is set, too, the
POSIX libraries are used to implement threads. "mt_posix" is automatically
included into the predicate set if the variable "type_of_threads" in the
META description of the "threads" package has the value "posix". This
is normally the case if "findlib" is configured for POSIX threads.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>mt_vm</TERM><LISTITEM
><PARA
>The "mt_vm" predicate means that in the case "mt" is set, too, the
VM thread emulation is used to implement multi-threading.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>gprof</TERM><LISTITEM
><PARA
>The "gprof" predicate means that in the case "native" is set, too, the
program is compiled for profiling. It is automatically included into
the predicate set if "ocamlopt" is used and the -p option is in
effect.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>autolink</TERM><LISTITEM
><PARA
>The "autolink" predicate means that ocamlc is able to perform automatic
linking. It is automatically included into the predicate set if ocamlc
knows automatic linking (from version 3.00), but it is not set if the
-noautolink option is set.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>syntax</TERM><LISTITEM
><PARA
>This predicate is set if there is a <LITERAL
MOREINFO="NONE"
>-syntax</LITERAL>
  option. It is set both for the preprocessor and the compiler/linker stage,
  and it can be used to find out whether the preprocessor is enabled or not.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2><REFSECT2
><TITLE
>Predicates for preprocessing</TITLE><VARIABLELIST
><VARLISTENTRY
><TERM
>preprocessor</TERM><LISTITEM
><PARA
>This predicate is always set while looking up the
  preprocessor arguments. It can be used to distinguish between the
  preprocessor stage and the compiler/linker stage.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>syntax</TERM><LISTITEM
><PARA
>This predicate is set if there is a <LITERAL
MOREINFO="NONE"
>-syntax</LITERAL>
  option. It is set both for the preprocessor and the compiler/linker stage,
  and it can be used to find out whether the preprocessor is enabled or not.
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>camlp4o</TERM><LISTITEM
><PARA
>This is the reserved predicate for the standard OCaml syntax.
  It can be used in the <LITERAL
MOREINFO="NONE"
>-syntax</LITERAL> predicate list.
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>camlp4r</TERM><LISTITEM
><PARA
>This is the reserved predicate for the revised OCaml syntax.
  It can be used in the <LITERAL
MOREINFO="NONE"
>-syntax</LITERAL> predicate list.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2><REFSECT2
><TITLE
>Special behaviour of "ocamlmktop"</TITLE><PARA
> As there is a special module <LITERAL
MOREINFO="NONE"
>Topfind</LITERAL> that
supports loading of packages in scripts, the "ocamlmktop" subcommand
can add initialization code for this module.  This extra code is
linked into the executable if "findlib" is in the set of effectively
linked packages.  </PARA></REFSECT2><REFSECT2
><TITLE
>Fixup of the dependency graph for multi-threading</TITLE><PARA
>For a number of reasons the presence of the "mt" predicate triggers
that (1) the package "threads" is added to the list of required packages
and (2) the package "threads" becomes prerequisite of all other packages
(except of itself and a few hardcoded exceptions). The effect is that
the options -thread and -vmthread automatically select the "threads"
package, and that "threads" is inserted at the right position in the
package list.</PARA></REFSECT2><REFSECT2
><TITLE
>Extended file naming</TITLE><PARA
>At a number of places one can not only refer to files by absolute
or relative path names, but also by extended names. These have two
major forms: "+<REPLACEABLE
>name</REPLACEABLE>"
refers to the subdirectory <REPLACEABLE
>name</REPLACEABLE> of the
standard library directory, and "@<REPLACEABLE
>name</REPLACEABLE>"
refers to the package directory of the package <REPLACEABLE
>name</REPLACEABLE>.
Both forms can be continued by a path, e.g. "@netstring/netstring_top.cma".</PARA><PARA
>You can use extended names: (1) With <LITERAL
MOREINFO="NONE"
>-I</LITERAL> options,
(2) as normal file arguments of the compiler, (3) in the 
"archive" property of packages.</PARA></REFSECT2><REFSECT2
><TITLE
>How to set the names of the compiler executables</TITLE><PARA
> Normally, the OCaml bytecode compiler can be called under the name
<LITERAL
MOREINFO="NONE"
>ocamlc</LITERAL>. However, this is not always true; sometimes a
different name is chosen.</PARA><PARA
> You can instruct ocamlfind to call executables with other names than
<LITERAL
MOREINFO="NONE"
>ocamlc</LITERAL>, <LITERAL
MOREINFO="NONE"
>ocamlopt</LITERAL>,
<LITERAL
MOREINFO="NONE"
>ocamlmktop</LITERAL>, and <LITERAL
MOREINFO="NONE"
>ocamlcp</LITERAL>. If present,
the environment variable <LITERAL
MOREINFO="NONE"
>OCAMLFIND_COMMANDS</LITERAL> is interpreted
as a mapping from the standard names to the actual names of the executables. It
must have the following format:

<PROGRAMLISTING
FORMAT="LINESPECIFIC"
><REPLACEABLE
>standardname1</REPLACEABLE>=<REPLACEABLE
>actualname1</REPLACEABLE> <REPLACEABLE
>standardname2</REPLACEABLE>=<REPLACEABLE
>actualname2</REPLACEABLE> ...</PROGRAMLISTING></PARA><PARA
>Example: You may set <LITERAL
MOREINFO="NONE"
>OCAMLFIND_COMMANDS</LITERAL> as follows:

<PROGRAMLISTING
FORMAT="LINESPECIFIC"
>OCAMLFIND_COMMANDS='ocamlc=ocamlc-3.00 ocamlopt=ocamlopt-3.00'
export OCAMLFIND_COMMANDS</PROGRAMLISTING></PARA><PARA
>Alternatively, you can change the configuration file
<LINK
LINKEND="FINDLIB.CONF"
>findlib.conf</LINK>.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.OCAMLMKLIB"
></ANCHOR>
  THE SUBCOMMAND "ocamlmklib"</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind ocamlmklib
          [ -package <REPLACEABLE
>package-name-list</REPLACEABLE> |
	    -predicates <REPLACEABLE
>pred-name-list</REPLACEABLE> |
            -dllpath-pkg <REPLACEABLE
>package-name-list</REPLACEABLE> |
            -dllpath-all |
	    -passopt <REPLACEABLE
>arg</REPLACEABLE> |
            -passrest <REPLACEABLE
>arg...</REPLACEABLE> |
	    <REPLACEABLE
>standard-option</REPLACEABLE> ]
            <REPLACEABLE
>file</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This is a wrapper around ocamlmklib, and creates library archives and
DLLs. In addition to the standard options, one can use -package to
add the search path of packages. Note that no predicates are set by default -
the wrapper does not know whether this is about byte or native code linking.</PARA><PARA
>This wrapper is mostly provided for completeness.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.OCAMLDEP"
></ANCHOR>
  THE "ocamldep" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind ocamldep [-package <REPLACEABLE
>package-name-list</REPLACEABLE> |
                    -syntax <REPLACEABLE
>pred-name-list</REPLACEABLE> |
                    -ppopt <REPLACEABLE
>camlp4-arg</REPLACEABLE> |
                    -passopt <REPLACEABLE
>arg</REPLACEABLE> |
                    -passrest <REPLACEABLE
>arg...</REPLACEABLE> |
                    -verbose |
                    <REPLACEABLE
>standard-option</REPLACEABLE>] <REPLACEABLE
>file</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This command is a driver for the tool <LITERAL
MOREINFO="NONE"
>ocamldep</LITERAL> of the
OCaml distribution. This driver is only useful in conjunction with
the preprocessor camlp4; otherwise it does not provide more functions
than <LITERAL
MOREINFO="NONE"
>ocamldep</LITERAL> itself.</PARA></REFSECT2><REFSECT2
><TITLE
>Options</TITLE><PARA
>Here, only the additional options not interpreted by <LITERAL
MOREINFO="NONE"
>ocamldep</LITERAL>
but
by the driver itself, and options with additional effects are explained.</PARA><VARIABLELIST
><VARLISTENTRY
><TERM
>-package <REPLACEABLE
>package-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>The packages named here are only used to look up the
preprocessor options. The package <LITERAL
MOREINFO="NONE"
>camlp4</LITERAL> should be
specified anyway, but further packages that add capabilities to the
preprocessor can also be passed.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-syntax <REPLACEABLE
>pred-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>The predicates that are in effect during the look-up
of the preprocessor options. At least, either <LITERAL
MOREINFO="NONE"
>camlp4o</LITERAL>
(selecting the normal syntax), or <LITERAL
MOREINFO="NONE"
>camlp4r</LITERAL> (selecting
the revised syntax) should be specified.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-ppopt <REPLACEABLE
>camlp4-arg</REPLACEABLE></TERM><LISTITEM
><PARA
>An option that is passed through to the camlp4 call.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-passopt <REPLACEABLE
>arg</REPLACEABLE></TERM><LISTITEM
><PARA
>An option that is passed through to the ocamldep call.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-passrest <REPLACEABLE
>arg...</REPLACEABLE></TERM><LISTITEM
><PARA
>All further arguments are passed down to ocamldep
  unprocessed</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-verbose</TERM><LISTITEM
><PARA
>Displays the resulting ocamldep command (for debugging)</PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2><REFSECT2
><TITLE
>Example</TITLE><PARA
>A typical way of using this driver:

<PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind ocamldep -package camlp4,xstrp4 -syntax camlp4r file1.ml file2.ml</PROGRAMLISTING>

This command outputs the dependencies of <LITERAL
MOREINFO="NONE"
>file1.ml</LITERAL> and
<LITERAL
MOREINFO="NONE"
>file2.ml</LITERAL>, although these modules make use of the
syntax extensions provided by <LITERAL
MOREINFO="NONE"
>xstrp4</LITERAL> and are written
in revised syntax.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.OCAMLBROWSER"
></ANCHOR>
  THE "ocamlbrowser" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind ocamlbrowser [-package <REPLACEABLE
>package-name-list</REPLACEABLE> |
                        -all |
                        -passopt <REPLACEABLE
>arg</REPLACEABLE> 
                        -passrest ]</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This driver calls the <LITERAL
MOREINFO="NONE"
>ocamlbrowser</LITERAL> with package options.
With <LITERAL
MOREINFO="NONE"
>-package</LITERAL>, the specified packages are included into
the search path of the browser, and the modules of these packages become
visible (in addition to the standard library). The option <LITERAL
MOREINFO="NONE"
>-all</LITERAL> causes that all packages are selected that are managed by findlib.</PARA><PARA
>As for other drivers, the options <LITERAL
MOREINFO="NONE"
>-passopt</LITERAL> and
<LITERAL
MOREINFO="NONE"
>-passrest</LITERAL> can be used
to pass arguments directly to the <LITERAL
MOREINFO="NONE"
>ocamlbrowser</LITERAL> program.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.OCAMLDOC"
></ANCHOR>
  THE SUBCOMMAND "ocamldoc"</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind ocamldoc
          [ -package <REPLACEABLE
>package-name-list</REPLACEABLE> |
	    -predicates <REPLACEABLE
>pred-name-list</REPLACEABLE> |
	    -syntax <REPLACEABLE
>pred-name-list</REPLACEABLE> |
            -ppopt <REPLACEABLE
>camlp4-arg</REPLACEABLE> |
	    <REPLACEABLE
>standard-option</REPLACEABLE> ]
          <REPLACEABLE
>file</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This subcommand is a driver for ocamldoc. It undestands all options
ocamldoc supports plus the mentioned findlib options. Basically,
the -package options are translated into -I options, and the selected
syntax options are translated into camlp4 options.</PARA></REFSECT2><REFSECT2
><TITLE
>Options</TITLE><PARA
>Here, only the additional options not interpreted by <LITERAL
MOREINFO="NONE"
>ocamldep</LITERAL>
but
by the driver itself, and options with additional effects are explained.</PARA><VARIABLELIST
><VARLISTENTRY
><TERM
>-package <REPLACEABLE
>package-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>Adds the listed package names to the set of included
  packages. The package names may be separated by commas and/or
  whitespace. In the transformed command, for every package of the set
  of included packages and for any ancestor a directory search option
  is inserted after the already given options. This means that
  "-I" options are added for every package directory.
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-predicates <REPLACEABLE
>pred-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>Adds the given predicates to the set of actual
  predicates. The predicates must be separated by commas and/or
  whitespace. </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-syntax <REPLACEABLE
>pred-name-list</REPLACEABLE></TERM><LISTITEM
><PARA
>The predicates that are in effect during the look-up
of the preprocessor options. At least, either <LITERAL
MOREINFO="NONE"
>camlp4o</LITERAL>
(selecting the normal syntax), or <LITERAL
MOREINFO="NONE"
>camlp4r</LITERAL> (selecting
the revised syntax) should be specified.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>-ppopt <REPLACEABLE
>camlp4-arg</REPLACEABLE></TERM><LISTITEM
><PARA
>An option that is passed through to the camlp4 call.</PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.INSTALL"
></ANCHOR>
  THE "install" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind install [ -destdir <REPLACEABLE
>directory</REPLACEABLE> ]
                  [ -metadir <REPLACEABLE
>directory</REPLACEABLE> ]
	          [ -ldconf <REPLACEABLE
>path</REPLACEABLE> ]
                  [ -dont-add-directory-directive ]
                  [ -patch-version <REPLACEABLE
>string</REPLACEABLE> ]
                  [ -patch-rmpkg <REPLACEABLE
>name</REPLACEABLE> ]
                  [ -patch-archives ]
	          [ -dll ] [ -nodll ] [ -optional ] [ -add ]
                  <REPLACEABLE
>package_name</REPLACEABLE> <REPLACEABLE
>file</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This subcommand installs a new package either at the default location
(see the variable <LITERAL
MOREINFO="NONE"
>destdir</LITERAL> of
<LINK
LINKEND="FINDLIB.CONF"
>findlib.conf</LINK>), or in the directory
specified by the -destdir option. This
means that a new package directory is created and that the files on
the command line are copied to this directory. It is required that a
<LITERAL
MOREINFO="NONE"
>META</LITERAL> file is one of the files copied to the target
directory.</PARA><PARA
>Note that package directories should be flat (no
subdirectories). Existing packages are never overwritten.</PARA><PARA
>It is possible to have a separate directory for all the META files. If
you want that, you have either to set the variable
<LITERAL
MOREINFO="NONE"
>metadir</LITERAL> of 
<LINK
LINKEND="FINDLIB.CONF"
>findlib.conf</LINK>, or to specify the
-metadir option. In this case, the file called META is copied to the
specified directory and renamed to META.p (where p is the package
name), while all the other files are copied to the package
directory as usual. Furthermore, the META file is modified such that the
<LITERAL
MOREINFO="NONE"
>directory</LITERAL> variable contains the path of the package
directory. </PARA><PARA
> 
The option -dont-add-directory-directive prevents the installer from
adding a <LITERAL
MOREINFO="NONE"
>directory</LITERAL> variable.</PARA><PARA
>If there are files ending in the suffixes <LITERAL
MOREINFO="NONE"
>.so</LITERAL> or
<LITERAL
MOREINFO="NONE"
>.dll</LITERAL>, the package directory will be added to the
DLL configuration file <LITERAL
MOREINFO="NONE"
>ld.conf</LITERAL>, such that the dynamic
loader can find the DLL. The location of this file can be overriden by
the -ldconf option. To turn this feature off, use "-ldconf ignore";
this causes that the ld.conf file is not modified.</PARA><PARA
>However, if there is a stublibs directory in site-lib, the DLLs are not
installed in the package directory, but in this directory that is
shared by all packages that are installed at the same location.
In this case, the configuration file <LITERAL
MOREINFO="NONE"
>ld.conf</LITERAL> is
not modified, so you do not need to say "-ldconf ignore" if you
prefer this style of installation.</PARA><PARA
>The options -dll and -nodll can be used to control exactly which files
are considered as DLLs and which not. By default, the mentioned
suffix rule is in effect: files ending in ".so" (Unix) or ".dll"
(Windows) are DLLs. The switch -dll changes this, and all following
files are considered as DLLs, regardless of their suffix. The switch 
-nodll expresses that the following files are not DLLs, even if they
have a DLL-like suffix. For example, in the following call the files
f1 and f2 are handled by the suffix rule; f3 and f4 are DLLs anyway;
and f5 and f6 are not DLLs:

<PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind install p f1 f2 -dll f3 f4 -nodll f5 f6</PROGRAMLISTING></PARA><PARA
>The switch -optional declares that all following files are optional,
i.e. the command will not fail if files do not exist.</PARA><PARA
>The -patch options may be used to change the contents of the META files
while it is being installed. The option -patch-version changes the
contents of the top-level "version" variable. The option -patch-rmpkg
removes the given subpackage. The option -patch-archives is experimental,
in particular it removes all non-existing files from "archive" variables,
and even whole subpackages if the archives are missing.</PARA><PARA
>The effect of -add is to add further files to an already installed
packages.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.REMOVE"
></ANCHOR>
  THE "remove" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind remove [ -destdir <REPLACEABLE
>directory</REPLACEABLE> ]
                 [ -metadir <REPLACEABLE
>directory</REPLACEABLE> ]
                 [ -ldconf <REPLACEABLE
>path</REPLACEABLE> ]
                 <REPLACEABLE
>package_name</REPLACEABLE></PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>The package will removed if it is installed at the default location 
(see the variable <LITERAL
MOREINFO="NONE"
>destdir</LITERAL> of
<LINK
LINKEND="FINDLIB.CONF"
>findlib.conf</LINK>). If the package
resides at a different location, it will not be removed by default;
however, you can pass an alternate directory for packages by the
-destdir option. (This must be the same directory as specified at
installation time.)</PARA><PARA
>Note that package directories should be flat (no subdirectories); this
subcommand cannot remove deep package directories. </PARA><PARA
>If you have a separate directory for META files, you must either
configure this directory by the <LITERAL
MOREINFO="NONE"
>metadir</LITERAL> variable
of <LINK
LINKEND="FINDLIB.CONF"
>findlib.conf</LINK>, or by specifying
the -metadir option.</PARA><PARA
> 
The command does not fail if the package and/or the META
file cannot be located. You will get a warning only in this case.</PARA><PARA
>If the package directory is mentioned in the <LITERAL
MOREINFO="NONE"
>ld.conf</LITERAL>
configuration file for DLLs, it will be tried to remove this entry
from the file. The location of this file can be overriden by
the -ldconf option. To turn this feature off, use "-ldconf ignore";
this causes that the ld.conf file is not modified.</PARA><PARA
>If there is a stublibs directory, it is checked whether the package
owns any of the files in this directory, and the owned files will
be deleted.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.LIST"
></ANCHOR>
  THE "list" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind list [-describe]</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This command lists all packages in the search path. The option -describe
outputs the package descriptions, too.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.PRINTPPX"
></ANCHOR>
  THE "printppx" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind printppx
          [ -predicates <REPLACEABLE
>pred-name-list</REPLACEABLE> ]
          [ -ppxopt <REPLACEABLE
>package</REPLACEABLE>,<REPLACEABLE
>arg</REPLACEABLE> ]
          <REPLACEABLE
>package</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This command prints the ppx preprocessor options as they would
occur in an OCaml compiler invocation for the packages listed in
the command. The output includes one "-ppx" option for each
preprocessor. The possible options have the same meaning as for
"ocamlfind ocamlc". The option "-predicates" adds assumed
predicates and
"-ppxopt <REPLACEABLE
>package</REPLACEABLE>,<REPLACEABLE
>arg</REPLACEABLE>"
adds "<REPLACEABLE
>arg</REPLACEABLE>" to the ppx invocation of
package <REPLACEABLE
>package</REPLACEABLE>.</PARA><PARA
>The output of "ocamlfind printppx" will contain quotes
"<LITERAL
MOREINFO="NONE"
>"</LITERAL>" for ppx commands that contain
space-separated arguments. In this case <LITERAL
MOREINFO="NONE"
>$(ocamlfind
printppx ...)</LITERAL> won't work as naively expected, because
many shells (including bash and dash) perform field splitting on
the result of command substitutions without honoring quotes.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.LINT"
></ANCHOR>
  THE "lint" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind lint <REPLACEABLE
>file</REPLACEABLE></PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>Checks the META file, and reports possible problems.</PARA></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.PRINTCONF"
></ANCHOR>
  THE "printconf" SUBCOMMAND</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind printconf [ conf | path | destdir | metadir | metapath | stdlib | ldconf ]</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This command prints the effective configuration after reading the
configuration file, and after applying the various environment
variables overriding settings. When called without arguments, the command
prints all configuration options in a human-readable form. When called
with an argument, only the value of the requested option is printed without
explaining texts:</PARA><VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>conf</LITERAL></TERM><LISTITEM
><PARA
>Prints the location of the configuration file findlib.conf
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>path</LITERAL></TERM><LISTITEM
><PARA
>Prints the search path for packages. The members of the
  path are separated by linefeeds.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>destdir</LITERAL></TERM><LISTITEM
><PARA
>Prints the location where package are installed and
  removed by default.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>metadir</LITERAL></TERM><LISTITEM
><PARA
>Prints the location where META files are installed and
  removed (if the alternative layout is used).</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>metapath</LITERAL></TERM><LISTITEM
><PARA
>Prints the path where the META file is installed for
a fictive package. The name of the package is marked with '%s' in the
path. For instance, this command could output "/some/path/%s/META" or
"/some/path/META.%s", depending on the layout.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>stdlib</LITERAL></TERM><LISTITEM
><PARA
>Prints the location of the standard library.</PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>ldconf</LITERAL></TERM><LISTITEM
><PARA
>Prints the location of the ld.conf file</PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></REFSECT2></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.PKGCMD"
></ANCHOR>
  THE SUBCOMMAND CALLING PACKAGE PROGRAMS</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind <REPLACEABLE
>pkg</REPLACEABLE>/<REPLACEABLE
>cmd</REPLACEABLE> <REPLACEABLE
>argument</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>This subcommand is useful to call programs that are installed in
package directories. It looks up the directory for 
<REPLACEABLE
>pkg</REPLACEABLE> and calls the command named
<REPLACEABLE
>cmd</REPLACEABLE> in this directory. The remaining arguments
are passed to this command.</PARA><PARA
>argv(0) contains the absolute path to the command, and argv(1) and
the following argv entries contain the arguments. The working directory
is not changed.</PARA><PARA
>Example: To call the program "x" that is installed in package "p",
with arguments "y" and "z", run:</PARA><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind p/x y z</PROGRAMLISTING></REFSECT2></REFSECT1><REFSECT1
><TITLE
>  CONFIGURATION FILE, ENVIRONMENT VARIABLES</TITLE><PARA
> The configuration file and environment variables are documented
in the manual page for
 <LINK
LINKEND="FINDLIB.CONF"
>findlib.conf</LINK>.</PARA></REFSECT1><REFSECT1
><TITLE
><ANCHOR
ID="OCAMLFIND.TOOLCHAIN"
></ANCHOR>
  HOW TO SET THE TOOLCHAIN</TITLE><REFSECT2
><TITLE
>Synopsis</TITLE><PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind -toolchain <REPLACEABLE
>name</REPLACEABLE> ...</PROGRAMLISTING></REFSECT2><REFSECT2
><TITLE
>Description</TITLE><PARA
>The -toolchain option can be given before any other command,
e.g.
<PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlfind -toolchain foo ocamlc -c file.ml</PROGRAMLISTING>
compiles file.ml with toolchain "foo". By selecting toolchains one
can switch to different command sets. For instance, the toolchain
"foo" may consist of a patched ocamlc compiler. 
See <LINK
LINKEND="FINDLIB.CONF"
>findlib.conf</LINK> how to
configure toolchains.</PARA></REFSECT2></REFSECT1></REFENTRY><REFENTRY
><REFMETA
><REFENTRYTITLE
>META</REFENTRYTITLE><MANVOLNUM
>5</MANVOLNUM><REFMISCINFO
>The findlib package manager for OCaml</REFMISCINFO></REFMETA><REFNAMEDIV
ID="META"
><REFNAME
>META</REFNAME><REFPURPOSE
>[File that specifies metainformation of OCaml packages]</REFPURPOSE></REFNAMEDIV><REFSYNOPSISDIV
><TITLE
>GRAMMAR</TITLE><SYNOPSIS
FORMAT="LINESPECIFIC"
>         metafile ::= entry*
            entry ::= assignment | addition | subpackage
       subpackage ::= "package" pkgname '(' metafile ')'
       assignment ::= variable_name [ formal_predicates ] '='  value
         addition ::= variable_name [ formal_predicates ] '+=' value
formal_predicates ::= '(' formal_predicate { ',' formal_predicate } ')'
    variable_name ::= name
 formal_predicate ::= name | '-' name
             name ::= [ 'A'-'Z' 'a'-'z' '0'-'9' '_' '.' ]+
          pkgname ::= '"' (character but not '.')* '"'
            value ::= '"' character* '"'</SYNOPSIS></REFSYNOPSISDIV><REFSECT1
><TITLE
>DESCRIPTION</TITLE><PARA
>If a package directory contains a file with the fixed name "META" it
is interpreted as described here. The file is a sequence of entries
following the given grammar; every entry defines a variable under a
certain condition given by the list of formal predicates, or it
introduces a subpackage.</PARA><PARA
>There is a list of predefined variables and a list of standard
predicates. These variables define: required packages, description, version
information, directories, archive files, and linker options. The
predicates denote circumstances of the application of the variables:
whether the bytecode or the native compiler is used, if there is a
toploop compiled in, details of multi-threading execution, details of
profiling. </PARA></REFSECT1><REFSECT1
><TITLE
>DETAILS OF THE FILE FORMAT</TITLE><PARA
>The file consists of a sequence of entries which must be formed as the
grammar prescribes. The lexical tokens are names, values, and
interpunctuation like '(', ',' and so on. Note that linefeeds do not
play a special role, i.e. an entry definition may be given in more than
one line, or several definitions may occur on a single line. There may
be comments which begin with '#' and run until the end of the line.</PARA><PARA
>Names are sequences of the characters A-Z, a-z, 0-9, or _. Names
containing capital letters and names beginning with digits are
allowed but not recommended.</PARA><PARA
>Values are enclosed between double quotes. Values may contain any
character. The characters " and \ must be preceded by backslashes. </PARA><PARA
>Package names must not contain the '.' character because it is used
as delimiter of compound names.</PARA></REFSECT1><REFSECT1
><TITLE
>MAIN PACKAGES AND SUBPACKAGES</TITLE><PARA
>The outermost variable assignments and additions belong to the main
package. The name of the main package is not defined within META;
it is either the name of the directory containing META or the suffix
of the META file (if the name of the META file is formed like
META.name).</PARA><PARA
>The keyword <LITERAL
MOREINFO="NONE"
>package</LITERAL> starts the definition
of a subpackage. There must not be two such definitions with the
same name. Within the parantheses, the variable assignments and
additions refer to the subpackage. It is allowed that a subpackage
contains further subpackages.</PARA><PARA
>The package name following <LITERAL
MOREINFO="NONE"
>package</LITERAL>
is the local name relative to the main package, i.e. the
name of the main package is not mentioned. At all other places,
however, the subpackage must be prefixed by the name of the
containing package, separated by a '.'.</PARA><PARA
>Subpackages are independent of the containing package, except
that the subpackage points to the same installation directory as
the containing package (i.e. the location of the installation directory
is inherited from the containing package).</PARA></REFSECT1><REFSECT1
><TITLE
>SEMANTICS OF VARIABLE DEFINITIONS</TITLE><PARA
>In order to determine the value of a variable, first all assignments
are inspected, and the most specific assignment is taken (if there is
none, the empty string will be taken as value). In a second step,
all additions are gone through one after the other in the order
they occur in the file, and the values of all matching additions are
appended to the current value. In the following, it is further
clarified which assignment is the most specific, which additions
actually match, and how the details of the value addition look like.</PARA><PARA
> The most specific assignment is selected upon a set of actual
predicates, i.e. the set of predicates that are assumed to be true.
The predicates occuring in the definitions of assignments and
additions are called formal predicates. They may be positive or
negative; the latter are prepended by a '-' sign. In order to
determine the value after the evaluation of the assignments, the
following rules apply: </PARA><ITEMIZEDLIST
SPACING="COMPACT"
MARK="bullet"
><LISTITEM
><PARA
> An assignment can only be used if all positive formal
predicates are included in the set of actual predicates, and if all
negative formal predicates are not included in the set of actual
predicates.  Such an assignment is called
<EMPHASIS
>applicable</EMPHASIS>. If there is no such assignment, the
variable will have no value.  </PARA></LISTITEM><LISTITEM
><PARA
>If there is more than one applicable assignment, the definition with
the biggest number of formal predicates is selected.</PARA></LISTITEM><LISTITEM
><PARA
>If there is still more than one applicable assignment, both applicable 
and with a maximum number of formal predicates, the definition that is defined
first is selected.</PARA></LISTITEM></ITEMIZEDLIST><PARA
>An addition is matching when all positive formal predicates are
included in the set of actual predicates, and all negative formal
predicates are not included.</PARA><PARA
>The value of an addition is appended to the current value with
implicit white space as separator.</PARA></REFSECT1><REFSECT1
><TITLE
>VARIABLES</TITLE><PARA
>There is a set of variables with predefined meaning:</PARA><ITEMIZEDLIST
SPACING="COMPACT"
MARK="bullet"
><LISTITEM
><PARA
> The
variable "directory" redefines the location of the package
directory. Normally, the META file is the first file read in the
package directory, and before any other file is read, the "directory"
variable is evaluated in order to see if the package directory must be
changed. The value of the "directory" variable is determined with an
empty set of actual predicates. The value must be either: an absolute
path name of the alternate directory, or a path name relative to the
stdlib directory of OCaml (written "+path"), or a normal relative path
name (without special syntax). In the latter case, the interpretation
depends on whether it is contained in a main or sub package, and
whether the standard repository layout or the alternate layout is in
effect (see <LINK
LINKEND="SITE-LIB"
>site-lib</LINK> for these terms).
For a main package in standard layout the base directory is the
directory physically containing the META file, and the relative path
is interpreted for this base directory. For a main package in
alternate layout the base directory is the directory physically
containing the META.pkg files. The base directory for subpackages is
the package directory of the containing package. (In the case
that a subpackage definition does not have a "directory" setting,
the subpackage simply inherits the package directory of the containing
package. By writing a "directory" directive one can change this
location again.)</PARA></LISTITEM><LISTITEM
><PARA
> 
The variable "requires" specifies the list of required packages. The
names of the packages must be separated by white space and/or commas.
The names must be fully qualified (i.e. when they refer to a subpackage,
the names of all containing packages must be prepended, separated by
'.').</PARA></LISTITEM><LISTITEM
><PARA
> 
The variable "description" may include a short description of the
package (displayed by <LITERAL
MOREINFO="NONE"
>ocamlfind list</LITERAL>).</PARA></LISTITEM><LISTITEM
><PARA
> 
The variable "version" specifies the version string.</PARA></LISTITEM><LISTITEM
><PARA
> 
The variable "archive" specifies the list of archive files. These
files should be given either as (1) plain names without any directory
information; they are only searched in the package directory.
(2) Or they have the form "+path" in which case the files are looked up
relative to the standard library. (3) Or they have the form "@name/file"
in which case the files are looked up in the package directory
of another package. (4) Or they are given as absolute paths.</PARA><PARA
>The
names of the files must be separated by white space and/or commas.
In the preprocessor stage, the archive files are passed as extensions
to the preprocessor (camlp4) call. In the linker stage (-linkpkg), the archive
files are linked. In the compiler stage, the archive files are ignored.</PARA><PARA
>Note that "archive" should only be used for archive files that are
intended to be included in executables or loaded into toploops. For
modules loaded at runtime there is the separate variable "plugin".</PARA></LISTITEM><LISTITEM
><PARA
> 
The variable "plugin" specifies the plugin archives of the package.
These can be dynamically loaded with the <LITERAL
MOREINFO="NONE"
>Fl_dynload</LITERAL>
module. The plugin archives can have ".cmo", ".cma", or ".cmxs" suffix.</PARA></LISTITEM><LISTITEM
><PARA
> 
The variable "linkopts" specifies additional linker options.</PARA></LISTITEM><LISTITEM
><PARA
>The variable "error" can be used to signal error conditions. When
this variable is applicable, the ocaml compilers are stopped, and
an error message is printed. The message is the value of the variable.</PARA></LISTITEM><LISTITEM
><PARA
>The variable "warning" can be used to signal warnings. When
this variable is applicable, the warning is printed, but the
compilation continues. The message is the value of the variable.</PARA></LISTITEM><LISTITEM
><PARA
> 
The variable "exists_if" can be used to disable subpackages. The
value of "exists_if" is a file; the subpackage is hidden if this
file does not exist. You can also enumerate several files, and the
subpackage is hidden if none of the files exist.</PARA></LISTITEM><LISTITEM
><PARA
>The variable "ppx" is a command that is added to the compiler invocation
via the -ppx option (available since OCaml-4.01). If the command is
relative to the current directory (e.g. ./cmd), the command is expected
in the package directory. The special forms as defined for "archive"
are also available (e.g. @otherpkg/cmd). Additional arguments can be
specified on the ocamlfind command line with the -ppxopt option
or the "ppxopt" variable.</PARA></LISTITEM><LISTITEM
><PARA
>The variable "ppxopt" is a set of options that are added to the ppx
rewriter invocation. The contents of the variable consists of one or
several whitespace-separated parts. Every part consists of several
comma-separated subparts; the first subpart indicates the package
that contains the ppx rewriter invocation, the rest contain the options
to be appended. If the option is a path relative to the current directory
(e.g. ./foo.cma), the path is expanded relative to the package directory.
The special forms as defined for "archive" are also available
(e.g. @otherpkg/foo.cma).</PARA></LISTITEM></ITEMIZEDLIST><PARA
>It is possible to define additional variables but there is currently
no software interpreting them.</PARA></REFSECT1><REFSECT1
><TITLE
>PREDICATES</TITLE><PARA
>There is a list of standard predicates:</PARA><ITEMIZEDLIST
SPACING="COMPACT"
MARK="bullet"
><LISTITEM
><PARA
>The "byte" predicate means that the bytecode compiler is used.</PARA></LISTITEM><LISTITEM
><PARA
>The "native" predicate means that the native compiler is used.</PARA></LISTITEM><LISTITEM
><PARA
>The "toploop" predicate means that the toploop is available in the
linked program. It is only set when the toploop is running, not when
the toploop is generated.</PARA></LISTITEM><LISTITEM
><PARA
>The "create_toploop" predicate means that a toploop is created (using
ocamlmktop).</PARA></LISTITEM><LISTITEM
><PARA
>The "mt" predicate means that the program is multi-threaded.</PARA></LISTITEM><LISTITEM
><PARA
>The "mt_posix" predicate means that in the case "mt" is set, too, the
POSIX libraries are used to implement threads.</PARA></LISTITEM><LISTITEM
><PARA
>The "mt_vm" predicate means that in the case "mt" is set, too, the
VM-based libraries are used to implement threads.</PARA></LISTITEM><LISTITEM
><PARA
>The "gprof" predicate means that in the case "native" is set, too, the
program is compiled for profiling</PARA></LISTITEM><LISTITEM
><PARA
>The "autolink" predicate means that ocamlc can/will perform automatic linking.</PARA></LISTITEM><LISTITEM
><PARA
>The "preprocessor" predicate means that the META variables are scanned for
preprocessor options.</PARA></LISTITEM><LISTITEM
><PARA
>The "syntax" predicate means that the -syntax option is present on the
command line.</PARA></LISTITEM><LISTITEM
><PARA
>Legacy: The "plugin" predicate could be used in some versions of findlib
to select cmxs archives instead of cmxa archives. This use is still possible
but discouraged.</PARA></LISTITEM></ITEMIZEDLIST><PARA
>In addition to these predicates, there are package predicates
for every package that is finally selected. Of course, this kind of
predicate must not be used to select "directory" and "requires"
variables, but for the other variables they are perfectly valid.
The package predicates have the form "pkg_" plus the name of the
package (fully qualified).</PARA></REFSECT1></REFENTRY><REFENTRY
><REFMETA
><REFENTRYTITLE
>findlib.conf</REFENTRYTITLE><MANVOLNUM
>5</MANVOLNUM><REFMISCINFO
>The findlib package manager for OCaml</REFMISCINFO></REFMETA><REFNAMEDIV
ID="FINDLIB.CONF"
><REFNAME
>findlib.conf</REFNAME><REFPURPOSE
>[Configuration of findlib/ocamlfind]</REFPURPOSE></REFNAMEDIV><REFSECT1
><TITLE
>GENERAL</TITLE><PARA
>There are three possibilities to configure the findlib library:

<VARIABLELIST
><VARLISTENTRY
><TERM
>Build time:</TERM><LISTITEM
><PARA
>    Before findlib is compiled, a "configure" script is invoked to figure
    out the settings that are most likely to work on the system. Most
    settings are simply entered into text files and can easily be changed
    after installation. The following properties cannot be changed later
    because they are compiled into the resulting binaries:

    <ITEMIZEDLIST
><LISTITEM
><PARA
>    The default location of the configuration file findlib.conf. However,
    you can set a different location by the environment variable
    <LITERAL
MOREINFO="NONE"
>OCAMLFIND_CONF</LITERAL>.
    </PARA></LISTITEM><LISTITEM
><PARA
>    Whether the installed OCaml version supports autolinking or not.
    </PARA></LISTITEM></ITEMIZEDLIST>
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>Configuration file findlib.conf:</TERM><LISTITEM
><PARA
>    An initial version of this file is generated by the configure script,
    but you are free to modify it later. Most important, this file
    contains the system-wide search path used to look up packages, and the
    default location where to install new packages.
  </PARA><PARA
>    All files with the suffix ".conf" found in the directory
    findlib.conf.d are also scanned for parameters.
  </PARA></LISTITEM></VARLISTENTRY><VARLISTENTRY
><TERM
>Environment variables:</TERM><LISTITEM
><PARA
>    The settings of findlib.conf can be overridden by environment variables.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

Last but not least, several settings can also be passed as
command-line options, or by invoking the function
<LITERAL
MOREINFO="NONE"
>Findlib.init</LITERAL>. </PARA></REFSECT1><REFSECT1
><TITLE
>findlib.conf</TITLE><PARA
>The directory containing findlib.conf is determined at build time (by
running the configure script), the fallback default is
<LITERAL
MOREINFO="NONE"
>/usr/local/etc</LITERAL>. You can set a different location by
changing the environment variable <LITERAL
MOREINFO="NONE"
>OCAMLFIND_CONF</LITERAL>
which must contain the absolute path of findlib.conf.</PARA><PARA
>The file has the same syntax as <LINK
LINKEND="META"
><LITERAL
MOREINFO="NONE"
>META</LITERAL></LINK>, i.e. it consists of a
number of lines with the format

<PROGRAMLISTING
FORMAT="LINESPECIFIC"
><REPLACEABLE
>variable</REPLACEABLE> = "<REPLACEABLE
>value</REPLACEABLE>"</PROGRAMLISTING></PARA><PARA
>Here is the list of allowed variables:

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>path</LITERAL></TERM><LISTITEM
><PARA
>    The search path for META files/package directories. The variable
    enumerates directories which are separated by colons (Windows:
    semicolons), and these directories are tried in turn to find a certain
    package. More exactly, if d is such a directory and p the searched
    package, the search algorithm will first check whether d/p/META
    exists. In this case, this META file is taken, and d/p is the package
    directory. Second, the algorithm tries d/META.p, but the package
    directory must be specified in this META.p file by a
    <LITERAL
MOREINFO="NONE"
>directory</LITERAL> directive.
  </PARA><PARA
>    Note that the first found META file is taken, so the order of the
    directories in the search path counts.
  </PARA><PARA
>    This variable is required.
  </PARA><PARA
>  Example:

  <PROGRAMLISTING
FORMAT="LINESPECIFIC"
>path = "/usr/local/lib/ocaml/site-lib:/usr/lib/ocaml/site-lib"</PROGRAMLISTING>
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>


<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>destdir</LITERAL></TERM><LISTITEM
><PARA
>    This variable determines the location where <LITERAL
MOREINFO="NONE"
>ocamlfind
    install</LITERAL> puts the packages by default: If d is this
    directory, and p the package to install, a new subdirectory d/p will
    be created containing all the files of the package.
  </PARA><PARA
>Example:
  <PROGRAMLISTING
FORMAT="LINESPECIFIC"
>destdir = "/usr/local/lib/ocaml/site-lib"</PROGRAMLISTING>
  </PARA><PARA
>    This variable is required.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>


<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>metadir</LITERAL></TERM><LISTITEM
><PARA
>    If set, the command <LITERAL
MOREINFO="NONE"
>ocamlfind install</LITERAL> will put the
    META files of packages into this directory (files are named META.p
    where p=package name); otherwise the META files are put into the
    package directories like any other file.
  </PARA><PARA
>Example:
  <PROGRAMLISTING
FORMAT="LINESPECIFIC"
>metadir = "/var/lib/findlib/metaregistry"</PROGRAMLISTING>
  </PARA><PARA
>    This variable is optional. It is not used by default.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>


<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>ocamlc</LITERAL>,
        <LITERAL
MOREINFO="NONE"
>ocamlopt</LITERAL>,
        <LITERAL
MOREINFO="NONE"
>ocamlcp</LITERAL>,
        <LITERAL
MOREINFO="NONE"
>ocamlmktop</LITERAL>,
	<LITERAL
MOREINFO="NONE"
>ocamldoc</LITERAL>,
	<LITERAL
MOREINFO="NONE"
>ocamldep</LITERAL>,
	<LITERAL
MOREINFO="NONE"
>ocamlbrowser</LITERAL>
  </TERM><LISTITEM
><PARA
>    If you want to call other executables than "ocamlc", "ocamlopt",
    "ocamlcp", "ocamlmktop", "ocamldoc", "ocamldep", and
    "ocamlbrowser", you can
    set the names of
    the executables here. The command <LITERAL
MOREINFO="NONE"
>ocamlfind</LITERAL> looks
    into these four variables to determine the names of the compilers to
    call.
  </PARA><PARA
>Example:
  <PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlc     = "ocamlc.opt"
ocamlopt   = "ocamlopt.opt"
ocamlcp    = "ocamlcp.opt"
ocamlmktop = "ocamlmktop.opt"</PROGRAMLISTING>
  </PARA><PARA
>    This variable is optional. It is not used by default.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>stdlib</LITERAL></TERM><LISTITEM
><PARA
>    This variable determines the location of the standard library. This must
    be the same directory for which the OCaml compilers are configured.
  </PARA><PARA
>    This variable is optional. It is not recommend to set this variable
    unless you know what you are doing!
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>ldconf</LITERAL></TERM><LISTITEM
><PARA
>    This variable determines the location of the ld.conf file. This must
    be the same file the OCaml compilers read in; it is updated by 
    ocamlfind when installing and removing packages. You can set this
    variable to the special value "<LITERAL
MOREINFO="NONE"
>ignore</LITERAL>" to disable
    the automatic modification of the ld.conf file.
  </PARA><PARA
>    If not set, the ld.conf file is assumed to reside in the OCaml
    standard library directory.
  </PARA><PARA
>    This variable is optional. It is not recommended to set this variable
    unless you know what you are doing!
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST></PARA><PARA
>Toolchains: It is possible to have variants of the original configuration.
These variants are called "toolchains" because they are intended to
select different compilers, e.g. patched compilers. In order to
set a variable for a certain toolchain, use the syntax

<PROGRAMLISTING
FORMAT="LINESPECIFIC"
><REPLACEABLE
>variable</REPLACEABLE>(<REPLACEABLE
>toolchain</REPLACEABLE>) = "<REPLACEABLE
>value</REPLACEABLE>"</PROGRAMLISTING>

For example:

<PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlc(mypatch) = "ocamlc-mypatch"</PROGRAMLISTING>

When the toolchain "mypatch" is selected, this compiler will be used instead
of the standard one.</PARA><PARA
>In order to switch to a certain toolchain, use the -toolchain
option of <LINK
LINKEND="OCAMLFIND"
>ocamlfind</LINK>.</PARA></REFSECT1><REFSECT1
><TITLE
>Environment</TITLE><PARA
>A number of environment variables modifies the behaviour of
findlib/ocamlfind:

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>OCAMLFIND_CONF</LITERAL></TERM><LISTITEM
><PARA
>    This variable overrides the location of the configuration file
    findlib.conf. It must contain the absolute path name of this file.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>OCAMLFIND_TOOLCHAIN</LITERAL></TERM><LISTITEM
><PARA
>    This variable sets the currently selected toolchain when
    a <LITERAL
MOREINFO="NONE"
>-toolchain</LITERAL> option is not passed
    on the command line.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>OCAMLPATH</LITERAL></TERM><LISTITEM
><PARA
>    This variable may contain an additional search path for package
    directories. It is treated as if the directories were prepended to
    the configuration variable <LITERAL
MOREINFO="NONE"
>path</LITERAL>.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>OCAMLFIND_DESTDIR</LITERAL></TERM><LISTITEM
><PARA
>    This variable overrides the configuration variable
    <LITERAL
MOREINFO="NONE"
>destdir</LITERAL>. 
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>OCAMLFIND_METADIR</LITERAL></TERM><LISTITEM
><PARA
>    This variable overrides the configuration variable
    <LITERAL
MOREINFO="NONE"
>metadir</LITERAL>. 
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>OCAMLFIND_COMMANDS</LITERAL></TERM><LISTITEM
><PARA
>  This variable overrides the configuration variables
  <LITERAL
MOREINFO="NONE"
>ocamlc</LITERAL>, <LITERAL
MOREINFO="NONE"
>ocamlopt</LITERAL>,
  <LITERAL
MOREINFO="NONE"
>ocamlcp</LITERAL>, <LITERAL
MOREINFO="NONE"
>ocamlmktop</LITERAL>,
  <LITERAL
MOREINFO="NONE"
>ocamldoc</LITERAL>, <LITERAL
MOREINFO="NONE"
>ocamldep</LITERAL>, and/or
  <LITERAL
MOREINFO="NONE"
>ocamlbrowser</LITERAL>. 
  Its value must conform to the syntax

    <PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlc=<REPLACEABLE
>name</REPLACEABLE> ocamlopt=<REPLACEABLE
>name</REPLACEABLE> ocamlcp=<REPLACEABLE
>name</REPLACEABLE> ocamlmktop=<REPLACEABLE
>name</REPLACEABLE> ocamldoc=<REPLACEABLE
>name</REPLACEABLE> ocamldep=<REPLACEABLE
>name</REPLACEABLE> ocamlbrowser=<REPLACEABLE
>name</REPLACEABLE></PROGRAMLISTING>
  </PARA><PARA
>Example:
    <PROGRAMLISTING
FORMAT="LINESPECIFIC"
>ocamlc=ocamlc-3.00 ocamlopt=ocamlopt-3.00 ocamlcp=ocamlcp-3.00 ocamlmktop=ocamlmktop-3.00</PROGRAMLISTING>
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>CAMLLIB</LITERAL> or <LITERAL
MOREINFO="NONE"
>OCAMLLIB</LITERAL></TERM><LISTITEM
><PARA
>    This variable overrides the configuration variable
    <LITERAL
MOREINFO="NONE"
>stdlib</LITERAL>. 
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>OCAMLFIND_LDCONF</LITERAL></TERM><LISTITEM
><PARA
>    This variable overrides the configuration variable
    <LITERAL
MOREINFO="NONE"
>ldconf</LITERAL>. 
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

<VARIABLELIST
><VARLISTENTRY
><TERM
><LITERAL
MOREINFO="NONE"
>OCAMLFIND_IGNORE_DUPS_IN</LITERAL></TERM><LISTITEM
><PARA
>    This variable instructs findlib not to emit warnings that packages
    or module occur several times. The variable must be set to the
    directory where the packages reside that are to be ignored for this
    warning.
  </PARA></LISTITEM></VARLISTENTRY></VARIABLELIST>

</PARA></REFSECT1></REFENTRY><REFENTRY
><REFMETA
><REFENTRYTITLE
>site-lib</REFENTRYTITLE><MANVOLNUM
>5</MANVOLNUM><REFMISCINFO
>The findlib package manager for OCaml</REFMISCINFO></REFMETA><REFNAMEDIV
ID="SITE-LIB"
><REFNAME
>site-lib</REFNAME><REFPURPOSE
>[Location of package directories]</REFPURPOSE></REFNAMEDIV><REFSYNOPSISDIV
><TITLE
>STANDARD LAYOUT</TITLE><SYNOPSIS
FORMAT="LINESPECIFIC"
>...somewhere in the filesystem hierarchy...
   |
   \ 
     site-lib
     |
     +- (optional) stublibs
     +- (optional) postinstall
     +- (optional) postremove
     |
     +- <REPLACEABLE
>package1</REPLACEABLE>
     |  |
     |  +- META
     |  +- <REPLACEABLE
>archive files</REPLACEABLE>
     |  +- <REPLACEABLE
>interface definitions</REPLACEABLE>
     |
     +- <REPLACEABLE
>package2</REPLACEABLE>
     +
     :
     :
     \
        <REPLACEABLE
>packageN</REPLACEABLE></SYNOPSIS></REFSYNOPSISDIV><REFSECT1
><TITLE
>DESCRIPTION</TITLE><PARA
>Every installation of "findlib" has a default location for package
directories, which is normally a directory called "site-lib". The
location can be set by the configuration variables
<LITERAL
MOREINFO="NONE"
>path</LITERAL> (used to look up packages), and
<LITERAL
MOREINFO="NONE"
>destdir</LITERAL> (used to install new packages);
see <LINK
LINKEND="FINDLIB.CONF"
>findlib.conf</LINK>.</PARA><PARA
>The name of a package is the name of the package directory. For
example, if <LITERAL
MOREINFO="NONE"
>destdir=/usr/local/lib/ocaml/site-lib</LITERAL>, the
package p will be installed in the subdirectory
<LITERAL
MOREINFO="NONE"
>/usr/local/lib/ocaml/site-lib/p</LITERAL>. This subdirectory
must contain the META file and all other files belonging to the package.
Package names must not contain the '.' character.</PARA><PARA
>The variable <LITERAL
MOREINFO="NONE"
>destdir</LITERAL> specifies the directory for
new packages. You can only have one such directory at a time; but of
course you can change this directory in findlib.conf. The command
<LITERAL
MOREINFO="NONE"
>ocamlfind install</LITERAL> puts new packages into this
directory; it is recommended to use this command for installation
because it ensures that the directory layout is right.</PARA><PARA
>For searching packages, findlib uses (only) the variable
<LITERAL
MOREINFO="NONE"
>path</LITERAL> which may name several locations to look at.</PARA><PARA
>For systems with DLL support another directory may exist: stublibs. 
If present, findlib will install DLLs into this directory that is
shared by all packages at the same site-lib location. Findlib remembers
which DLL belongs to which package by special files with the suffix
".owner"; e.g. for the DLL "dllpcre.so" there is another file
"dllpcre.so.owner" containing the string "pcre", so findlib knows
that the package "pcre" owns this DLL. It is not possible that a DLL
is owned by several packages.</PARA><PARA
>If the stublibs directory does not exist, DLLs are installed regularly
in the package directories like any other file.</PARA><PARA
>For special needs, a postinstall and/or a postremove script may be
installed in the site-lib directory. These scripts are invoked after
installation or removal of a package, respectively.</PARA></REFSECT1><REFSECT1
><TITLE
>ALTERNATE LAYOUT</TITLE><PARA
>
<PROGRAMLISTING
FORMAT="LINESPECIFIC"
>...somewhere in the filesystem hierarchy...
   |
   \ 
     site-lib
     |
     +- (optional) stublibs
     +- (optional) postinstall
     +- (optional) postremove
     |
     +- <REPLACEABLE
>package1</REPLACEABLE>
     |  |
     |  +- <REPLACEABLE
>archive files</REPLACEABLE>
     |  +- <REPLACEABLE
>interface definitions</REPLACEABLE>
     |
     +- <REPLACEABLE
>package2</REPLACEABLE>
     +
     :
     :
     \
  :     <REPLACEABLE
>packageN</REPLACEABLE>
  |
  \
    metaregistry
    |
    +- META.package1
    +- META.package2
    +
    :
    \
       META.packageN</PROGRAMLISTING></PARA><PARA
>This is an alternate directory layout collecting all META files in one
directory. You can configure this layout by setting
<LITERAL
MOREINFO="NONE"
>path</LITERAL> to the absolute location of
<LITERAL
MOREINFO="NONE"
>metaregistry</LITERAL>. Findlib recognizes that there are
META files in this directory and uses them; it is not necessary to
include <LITERAL
MOREINFO="NONE"
>site-lib</LITERAL> into the <LITERAL
MOREINFO="NONE"
>path</LITERAL>.</PARA><PARA
>In order to work, the META files must contain a
<LITERAL
MOREINFO="NONE"
>directory</LITERAL> directive pointing to the corresponding
package directory that resides below <LITERAL
MOREINFO="NONE"
>site-lib</LITERAL>.</PARA><PARA
>The command <LITERAL
MOREINFO="NONE"
>ocamlfind install</LITERAL> copes with this
layout, too. The variable <LITERAL
MOREINFO="NONE"
>destdir</LITERAL> must contain the
absolute location of <LITERAL
MOREINFO="NONE"
>site-lib</LITERAL>, and the variable
<LITERAL
MOREINFO="NONE"
>metadir</LITERAL> must contain the absolute location of
<LITERAL
MOREINFO="NONE"
>metaregistry</LITERAL>. Note that <LITERAL
MOREINFO="NONE"
>ocamlfind
install</LITERAL> automatically adds a <LITERAL
MOREINFO="NONE"
>directory</LITERAL>
directive to the META file, so you need not do it manually.</PARA></REFSECT1></REFENTRY></REFERENCE>
