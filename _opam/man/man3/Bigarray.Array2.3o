.TH "Bigarray.Array2" 3 2024-04-07 OCamldoc "OCaml library"
.SH NAME
Bigarray.Array2 \- Two-dimensional arrays.
.SH Module
Module   Bigarray.Array2
.SH Documentation
.sp
Module
.BI "Array2"
 : 
.B sig end

.sp
Two\-dimensional arrays\&. The 
.ft B
Array2
.ft R
structure provides operations
similar to those of 
.ft B
Bigarray\&.Genarray
.ft R
, but specialized to the
case of two\-dimensional arrays\&.

.sp

.sp
.sp
.I type 
.B (!'a, !'b, !'c)
.I t 

.sp
The type of two\-dimensional Bigarrays whose elements have
OCaml type 
.ft B
\&'a
.ft R
, representation kind 
.ft B
\&'b
.ft R
, and memory layout 
.ft B
\&'c
.ft R
\&.

.sp

.I val create 
: 
.B ('a, 'b) Bigarray.kind ->
.B   'c Bigarray.layout -> int -> int -> ('a, 'b, 'c) t
.sp

.ft B
Array2\&.create kind layout dim1 dim2
.ft R
returns a new Bigarray of
two dimensions, whose size is 
.ft B
dim1
.ft R
in the first dimension
and 
.ft B
dim2
.ft R
in the second dimension\&.  
.ft B
kind
.ft R
and 
.ft B
layout
.ft R
determine the array element kind and the array layout
as described for 
.ft B
Bigarray\&.Genarray\&.create
.ft R
\&.

.sp

.I val init 
: 
.B ('a, 'b) Bigarray.kind ->
.B   'c Bigarray.layout ->
.B   int -> int -> (int -> int -> 'a) -> ('a, 'b, 'c) t
.sp

.ft B
Array2\&.init kind layout dim1 dim2 f
.ft R
returns a new Bigarray 
.ft B
b
.ft R
of two dimensions, whose size is 
.ft B
dim2
.ft R
in the first dimension
and 
.ft B
dim2
.ft R
in the second dimension\&.  
.ft B
kind
.ft R
and 
.ft B
layout
.ft R
determine the array element kind and the array layout
as described for 
.ft B
Bigarray\&.Genarray\&.create
.ft R
\&.
.sp
Each element 
.ft B
Array2\&.get b i j
.ft R
of the array is initialized to
the result of 
.ft B
f i j
.ft R
\&.
.sp
In other words, 
.ft B
Array2\&.init kind layout dim1 dim2 f
.ft R
tabulates
the results of 
.ft B
f
.ft R
applied to the indices of a new Bigarray whose
layout is described by 
.ft B
kind
.ft R
, 
.ft B
layout
.ft R
, 
.ft B
dim1
.ft R
and 
.ft B
dim2
.ft R
\&.

.sp
.B "Since"
4.12

.sp

.I val dim1 
: 
.B ('a, 'b, 'c) t -> int
.sp
Return the first dimension of the given two\-dimensional Bigarray\&.

.sp

.I val dim2 
: 
.B ('a, 'b, 'c) t -> int
.sp
Return the second dimension of the given two\-dimensional Bigarray\&.

.sp

.I val kind 
: 
.B ('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind
.sp
Return the kind of the given Bigarray\&.

.sp

.I val layout 
: 
.B ('a, 'b, 'c) t -> 'c Bigarray.layout
.sp
Return the layout of the given Bigarray\&.

.sp

.I val change_layout 
: 
.B ('a, 'b, 'c) t ->
.B   'd Bigarray.layout -> ('a, 'b, 'd) t
.sp

.ft B
Array2\&.change_layout a layout
.ft R
returns a Bigarray with the
specified 
.ft B
layout
.ft R
, sharing the data with 
.ft B
a
.ft R
(and hence having
the same dimensions as 
.ft B
a
.ft R
)\&. No copying of elements is involved: the
new array and the original array share the same storage space\&.
The dimensions are reversed, such that 
.ft B
get v [| a; b |]
.ft R
in
C layout becomes 
.ft B
get v [| b+1; a+1 |]
.ft R
in Fortran layout\&.

.sp
.B "Since"
4.06

.sp

.I val size_in_bytes 
: 
.B ('a, 'b, 'c) t -> int
.sp

.ft B
size_in_bytes a
.ft R
is the number of elements in 
.ft B
a
.ft R
multiplied by 
.ft B
a
.ft R
\&'s 
.ft B
Bigarray\&.kind_size_in_bytes
.ft R
\&.

.sp
.B "Since"
4.03

.sp

.I val get 
: 
.B ('a, 'b, 'c) t -> int -> int -> 'a
.sp

.ft B
Array2\&.get a x y
.ft R
, also written 
.ft B
a\&.{x,y}
.ft R
,
returns the element of 
.ft B
a
.ft R
at coordinates (
.ft B
x
.ft R
, 
.ft B
y
.ft R
)\&.
.ft B
x
.ft R
and 
.ft B
y
.ft R
must be within the bounds
of 
.ft B
a
.ft R
, as described for 
.ft B
Bigarray\&.Genarray\&.get
.ft R
;
otherwise, 
.ft B
Invalid_argument
.ft R
is raised\&.

.sp

.I val set 
: 
.B ('a, 'b, 'c) t -> int -> int -> 'a -> unit
.sp

.ft B
Array2\&.set a x y v
.ft R
, or alternatively 
.ft B
a\&.{x,y} <\- v
.ft R
,
stores the value 
.ft B
v
.ft R
at coordinates (
.ft B
x
.ft R
, 
.ft B
y
.ft R
) in 
.ft B
a
.ft R
\&.
.ft B
x
.ft R
and 
.ft B
y
.ft R
must be within the bounds of 
.ft B
a
.ft R
,
as described for 
.ft B
Bigarray\&.Genarray\&.set
.ft R
;
otherwise, 
.ft B
Invalid_argument
.ft R
is raised\&.

.sp

.I val sub_left 
: 
.B ('a, 'b, Bigarray.c_layout) t ->
.B   int -> int -> ('a, 'b, Bigarray.c_layout) t
.sp
Extract a two\-dimensional sub\-array of the given two\-dimensional
Bigarray by restricting the first dimension\&.
See 
.ft B
Bigarray\&.Genarray\&.sub_left
.ft R
for more details\&.
.ft B
Array2\&.sub_left
.ft R
applies only to arrays with C layout\&.

.sp

.I val sub_right 
: 
.B ('a, 'b, Bigarray.fortran_layout) t ->
.B   int -> int -> ('a, 'b, Bigarray.fortran_layout) t
.sp
Extract a two\-dimensional sub\-array of the given two\-dimensional
Bigarray by restricting the second dimension\&.
See 
.ft B
Bigarray\&.Genarray\&.sub_right
.ft R
for more details\&.
.ft B
Array2\&.sub_right
.ft R
applies only to arrays with Fortran layout\&.

.sp

.I val slice_left 
: 
.B ('a, 'b, Bigarray.c_layout) t ->
.B   int -> ('a, 'b, Bigarray.c_layout) Bigarray.Array1.t
.sp
Extract a row (one\-dimensional slice) of the given two\-dimensional
Bigarray\&.  The integer parameter is the index of the row to
extract\&.  See 
.ft B
Bigarray\&.Genarray\&.slice_left
.ft R
for more details\&.
.ft B
Array2\&.slice_left
.ft R
applies only to arrays with C layout\&.

.sp

.I val slice_right 
: 
.B ('a, 'b, Bigarray.fortran_layout) t ->
.B   int -> ('a, 'b, Bigarray.fortran_layout) Bigarray.Array1.t
.sp
Extract a column (one\-dimensional slice) of the given
two\-dimensional Bigarray\&.  The integer parameter is the
index of the column to extract\&.  See 
.ft B
Bigarray\&.Genarray\&.slice_right
.ft R
for more details\&.  
.ft B
Array2\&.slice_right
.ft R
applies only to arrays
with Fortran layout\&.

.sp

.I val blit 
: 
.B ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit
.sp
Copy the first Bigarray to the second Bigarray\&.
See 
.ft B
Bigarray\&.Genarray\&.blit
.ft R
for more details\&.

.sp

.I val fill 
: 
.B ('a, 'b, 'c) t -> 'a -> unit
.sp
Fill the given Bigarray with the given value\&.
See 
.ft B
Bigarray\&.Genarray\&.fill
.ft R
for more details\&.

.sp

.I val of_array 
: 
.B ('a, 'b) Bigarray.kind ->
.B   'c Bigarray.layout -> 'a array array -> ('a, 'b, 'c) t
.sp
Build a two\-dimensional Bigarray initialized from the
given array of arrays\&.

.sp

.I val unsafe_get 
: 
.B ('a, 'b, 'c) t -> int -> int -> 'a
.sp
Like 
.ft B
Bigarray\&.Array2\&.get
.ft R
, but bounds checking is not always
performed\&.

.sp

.I val unsafe_set 
: 
.B ('a, 'b, 'c) t -> int -> int -> 'a -> unit
.sp
Like 
.ft B
Bigarray\&.Array2\&.set
.ft R
, but bounds checking is not always
performed\&.

.sp
