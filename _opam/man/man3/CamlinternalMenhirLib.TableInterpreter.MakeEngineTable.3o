.TH "CamlinternalMenhirLib.TableInterpreter.MakeEngineTable" 3 2024-04-07 OCamldoc "OCaml library"
.SH NAME
CamlinternalMenhirLib.TableInterpreter.MakeEngineTable \- no description
.SH Module
Module   CamlinternalMenhirLib.TableInterpreter.MakeEngineTable
.SH Documentation
.sp
Module
.BI "MakeEngineTable"
 : 
.B functor (T : TableFormat.TABLES) -> sig end

.sp

.sp
.B "Parameters:"
.sp
"T"

.B CamlinternalMenhirLib.TableFormat.TABLES





.sp
.sp
.I type state 

.sp

.sp

.I val number 
: 
.B state -> int
.sp

.sp
.I type token 

.sp

.sp
.I type terminal 

.sp

.sp
.I type nonterminal 

.sp

.sp
.I type semantic_value 

.sp

.sp

.I val token2terminal 
: 
.B token ->
.B   terminal
.sp

.sp

.I val token2value 
: 
.B token ->
.B   semantic_value
.sp

.sp

.I val error_terminal 
: 
.B terminal
.sp

.sp

.I val error_value 
: 
.B semantic_value
.sp

.sp

.I val foreach_terminal 
: 
.B (terminal -> 'a -> 'a) -> 'a -> 'a
.sp

.sp
.I type production 

.sp

.sp

.I val production_index 
: 
.B production -> int
.sp

.sp

.I val find_production 
: 
.B int -> production
.sp

.sp

.I val default_reduction 
: 
.B state ->
.B   ('env -> production -> 'answer) ->
.B   ('env -> 'answer) -> 'env -> 'answer
.sp

.sp

.I val action 
: 
.B state ->
.B   terminal ->
.B   semantic_value ->
.B   ('env ->
.B    bool ->
.B    terminal ->
.B    semantic_value ->
.B    state -> 'answer) ->
.B   ('env -> production -> 'answer) ->
.B   ('env -> 'answer) -> 'env -> 'answer
.sp

.sp

.I val goto_nt 
: 
.B state ->
.B   nonterminal ->
.B   state
.sp

.sp

.I val goto_prod 
: 
.B state ->
.B   production ->
.B   state
.sp

.sp

.I val maybe_goto_nt 
: 
.B state ->
.B   nonterminal ->
.B   state option
.sp

.sp

.I val is_start 
: 
.B production -> bool
.sp

.sp

.I exception Error 

.sp

.sp
.I type semantic_action 
= 
.B (state,
.B    semantic_value,
.B    token)
.B   CamlinternalMenhirLib.EngineTypes.env ->
.B   (state,
.B    semantic_value)
.B   CamlinternalMenhirLib.EngineTypes.stack

.sp

.sp

.I val semantic_action 
: 
.B production ->
.B   semantic_action
.sp

.sp

.I val may_reduce 
: 
.B state ->
.B   production -> bool
.sp

.sp

.I val log 
: 
.B bool
.sp

.sp
.I module Log : 
.B sig end

.sp

.sp
