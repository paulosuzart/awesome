.TH "Ephemeron.K2.Make" 3 2024-04-07 OCamldoc "OCaml library"
.SH NAME
Ephemeron.K2.Make \- Functor building an implementation of a weak hash table
.SH Module
Module   Ephemeron.K2.Make
.SH Documentation
.sp
Module
.BI "Make"
 : 
.B functor (H1 : Hashtbl.HashedType) (H2 : Hashtbl.HashedType) -> sig end

.sp
Functor building an implementation of a weak hash table

.sp
.B "Parameters:"
.sp
"H1"

.B Stdlib.Hashtbl.HashedType


.sp
"H2"

.B Stdlib.Hashtbl.HashedType





.sp
.sp

.PP
Propose the same interface as usual hash table\&. However since
the bindings are weak, even if 
.ft B
mem h k
.ft R
is true, a subsequent
.ft B
find h k
.ft R
may raise 
.ft B
Not_found
.ft R
because the garbage collector
can run between the two\&.
.PP
.I type key 

.sp

.sp
.I type 
.B !'a
.I t 

.sp

.sp

.I val create 
: 
.B int -> 'a t
.sp

.sp

.I val clear 
: 
.B 'a t -> unit
.sp

.sp

.I val reset 
: 
.B 'a t -> unit
.sp

.sp

.I val copy 
: 
.B 'a t -> 'a t
.sp

.sp

.I val add 
: 
.B 'a t -> key -> 'a -> unit
.sp

.sp

.I val remove 
: 
.B 'a t -> key -> unit
.sp

.sp

.I val find 
: 
.B 'a t -> key -> 'a
.sp

.sp

.I val find_opt 
: 
.B 'a t -> key -> 'a option
.sp

.sp

.I val find_all 
: 
.B 'a t -> key -> 'a list
.sp

.sp

.I val replace 
: 
.B 'a t -> key -> 'a -> unit
.sp

.sp

.I val mem 
: 
.B 'a t -> key -> bool
.sp

.sp

.I val length 
: 
.B 'a t -> int
.sp

.sp

.I val stats 
: 
.B 'a t -> Hashtbl.statistics
.sp

.sp

.I val add_seq 
: 
.B 'a t -> (key * 'a) Seq.t -> unit
.sp

.sp

.I val replace_seq 
: 
.B 'a t -> (key * 'a) Seq.t -> unit
.sp

.sp

.I val of_seq 
: 
.B (key * 'a) Seq.t -> 'a t
.sp

.sp

.I val clean 
: 
.B 'a t -> unit
.sp
remove all dead bindings\&. Done automatically during automatic resizing\&.

.sp

.I val stats_alive 
: 
.B 'a t -> Hashtbl.statistics
.sp
same as 
.ft B
Hashtbl\&.SeededS\&.stats
.ft R
but only count the alive bindings

.sp
