.TH "Format_tutorial" 3 2024-04-07 OCamldoc "OCaml library"
.SH NAME
Format_tutorial \-  Using the Format module 
.SH Module
Module   Format_tutorial
.SH Documentation
.sp
Module
.BI "Format_tutorial"
 : 
.B sig end

.sp
.SS Using the Format module
.sp
.SS Principles
.sp
Line breaking is based on three concepts:
.sp

.sp
\-boxes : a box is a logical pretty\-printing unit, which
defines a behaviour of the pretty\-printing engine to display the
material inside the box\&.
.sp
\-break hints: a break hint is a directive to the
pretty\-printing engine that proposes to break the line here, if it is
necessary to properly print the rest of the material\&.
Otherwise, the pretty\-printing engine never break lines (except
"in case of emergency" to avoid very bad output)\&.
In short, a break hint tells the pretty printer that a line break here
may be appropriate\&.
.sp
\-indentation rules:
When a line break occurs, the pretty\-printing engines fixes the
indentation (or amount of leading spaces) of the new line using
indentation rules, as follows:
.sp
\-A box can state the extra indentation of every new line opened in
its scope\&. This extra indentation is named
box breaking indentation\&.
.sp
\-A break hint can also set the additional indentation of the new line
it may fire\&. This extra indentation is named hint breaking
indentation\&.
.sp
\- If break hint 
.ft B
bh
.ft R
fires a new line within box
.ft B
b
.ft R
, then the indentation of the new line is simply the sum of:
the current indentation of box 
.ft B
b
.ft R
+
the additional box breaking indentation, as defined by box 
.ft B
b
.ft R
+
the additional hint breaking indentation, as defined by break
hint 
.ft B
bh
.ft R
\&.


.sp
.SS Boxes
.sp
There are 4 types of boxes\&. (The most often used is the "hov" box type, so skip
the rest at first reading)\&.
.sp
.sp
\-horizontal box (h box, as obtained by the
.ft B
Format\&.open_hbox
.ft R
procedure): within this box, break hints do not
lead to line breaks\&.
.sp
\-vertical box (v box, as obtained by the
.ft B
Format\&.open_vbox
.ft R
procedure): within this box, every break hint lead
to a new line\&.
.sp
\-vertical/horizontal box (hv box, as obtained by
the 
.ft B
Format\&.open_hvbox
.ft R
procedure): if it is possible, the entire box
is written on a single line; otherwise, every break hint within the box
leads to a new line\&.
.sp
\-vertical or horizontal box (hov box, as obtained
by the 
.ft B
Format\&.open_box
.ft R
or 
.ft B
Format\&.open_hovbox
.ft R
procedures): within this
box, break hints are used to cut the line when there is no more room on the
line\&. There are two kinds of "hov" boxes, you can find the details below\&.
In first approximation, let me consider these two kinds of "hov" boxes as
equivalent and obtained by calling the 
.ft B
Format\&.open_box
.ft R
procedure\&.

Let me give an example\&. Suppose we can write 10 chars before
the right margin (that indicates no more room)\&. We represent any
char as a 
.ft B
\-
.ft R
sign; characters 
.ft B
[
.ft R
and 
.ft B
]
.ft R
indicates the opening and closing of a box and 
.ft B
b
.ft R
stands
for a break hint given to the pretty\-printing engine\&.
.sp
The output "\-\-b\-\-b\-\-" is displayed like this (the 
.ft B
b
.ft R
symbol
stands for the value of the break that is explained below):
.sp
Within a "h" box:
.sp

.EX
.ft B
.br
\&\-\-b\-\-b\-\-
.br
\&
.ft R
.EE
.sp
Within a "v" box:
.sp

.EX
.ft B
.br
\&\-\-b
.br
\&\-\-b
.br
\&\-\-
.br
\&
.ft R
.EE
.sp
Within a "hv" box:
.sp
If there is enough room to print the box on the line:
.sp

.EX
.ft B
.br
\&\-\-b\-\-b\-\-
.br
\&
.ft R
.EE
.sp
But "\-\-\-b\-\-\-b\-\-\-" that cannot fit on the line is written
.sp

.EX
.ft B
.br
\&\-\-\-b
.br
\&\-\-\-b
.br
\&\-\-\-
.br
\&
.ft R
.EE
.sp
Within a "hov" box:
.sp
If there is enough room to print the box on the line:
.sp

.EX
.ft B
.br
\&\-\-b\-\-b\-\-
.br
\&
.ft R
.EE
.sp
But if "\-\-\-b\-\-\-b\-\-\-" cannot fit on the line, it is written as
.sp

.EX
.ft B
.br
\&\-\-\-b\-\-\-b
.br
\&\-\-\-
.br
\&
.ft R
.EE
.sp
The first break hint does not lead to a new line, since there is enough room on
the line\&. The second one leads to a new line since there is no more room to
print the material following it\&. If the room left on the line were even
shorter, the first break hint may lead to a new line and "\-\-\-b\-\-\-b\-\-\-" is
written as:
.sp

.EX
.ft B
.br
\&\-\-\-b
.br
\&\-\-\-b
.br
\&\-\-\-
.br
\&
.ft R
.EE
.sp
.SS Printing spaces
.sp
Break hints are also used to output spaces (if the line is not split when the
break is encountered, otherwise the new line indicates properly the separation
between printing items)\&. You output a break hint using 
.ft B
print_break sp indent
.ft R
,
and this sp integer is used to print "sp" spaces\&. Thus 
.ft B
print_break sp \&.\&.\&.
.ft R
may
be thought as: print 
.ft B
sp
.ft R
spaces or output a new line\&.
.sp
For instance, if b is 
.ft B
break 1 0
.ft R
in the output "\-\-b\-\-b\-\-", we get
.sp
within a "h" box:
.sp

.EX
.ft B
.br
\&\-\- \-\- \-\-
.br
\&
.ft R
.EE
.sp
within a "v" box:
.sp

.EX
.ft B
.br
\&\-\-
.br
\&\-\-
.br
\&\-\-
.br
\&
.ft R
.EE
.sp
within a "hv" box:
.EX
.ft B
.br
\&\-\- \-\- \-\-
.br
\&
.ft R
.EE
.sp
or, according to the remaining room on the line:
.sp

.EX
.ft B
.br
\&\-\-
.br
\&\-\-
.br
\&\-\-
.br
\&
.ft R
.EE
.sp
and similarly for "hov" boxes\&.
.sp
Generally speaking, a printing routine using "format", should not directly
output white spaces: the routine should use break hints instead\&. (For instance
.ft B
print_space ()
.ft R
that is a convenient abbreviation for 
.ft B
print_break 1 0
.ft R
and
outputs a single space or break the line\&.)
.sp
.SS Indentation of new lines
.sp
The user gets 2 ways to fix the indentation of new lines:
.sp
When defining the box: when you open a box, you can fix the indentation
added to each new line opened within that box\&.
.sp
For instance: 
.ft B
open_hovbox 1
.ft R
opens a "hov" box with new lines indented 1 more
than the initial indentation of the box\&. With output "\-\-\-[\-\-b\-\-b\-\-b\-\-", we
get:
.sp

.EX
.ft B
.br
\&\-\-\-[\-\-b\-\-b
.br
\&     \-\-b\-\-
.br
\&
.ft R
.EE
.sp
with open_hovbox 2, we get
.sp

.EX
.ft B
.br
\&\-\-\-[\-\-b\-\-b
.br
\&      \-\-b\-\-
.br
\&
.ft R
.EE
.sp
Note: the [ sign in the display is not visible on the screen, it is just there
to materialise the aperture of the pretty\-printing box\&. Last "screen" stands
for:
.sp

.EX
.ft B
.br
\&\-\-\-\-\-b\-\-b
.br
\&     \-\-b\-\-
.br
\&
.ft R
.EE
.sp
When defining the break that makes the new line\&. As said above, you output
a break hint using 
.ft B
print_break sp indent
.ft R
\&. The 
.ft B
indent
.ft R
integer is used to fix
the additional indentation of the new line\&. Namely, it is added to the default
indentation offset of the box where the break occurs\&.
.sp
For instance, if [ stands for the opening of a "hov" box with 1 as extra
indentation (as obtained by 
.ft B
open_hovbox 1
.ft R
), and b is 
.ft B
print_break 1 2
.ft R
, then
from output "\-\-\-[\-\-b\-\-b\-\-b\-\-", we get:
.sp

.EX
.ft B
.br
\&   \-\-\-[\-\- \-\-
.br
\&         \-\-
.br
\&         \-\-
.br
\&
.ft R
.EE
.sp
.SS Refinement on "hov" boxes
.sp
The "hov" box type is refined into two categories\&.
.sp
.sp
\-the vertical or horizontal packing box (as obtained by the
.ft B
Format\&.open_hovbox
.ft R
procedure): break hints are used to cut the line when
there is no more room on the line; no new line occurs if there is enough room
on the line\&.
.sp
\-vertical or horizontal structural box (as obtained by the
.ft B
Format\&.open_box
.ft R
procedure): similar to the "hov" packing box, the break
hints are used to cut the line when there is no more room on the line; in
addition, break hints that can show the box structure lead to new lines even if
there is enough room on the current line\&.

The difference between a packing and a structural "hov" box is shown by a
routine that closes boxes and parentheses at the end of printing: with packing
boxes, the closure of boxes and parentheses do not lead to new lines if there
is enough room on the line, whereas with structural boxes each break hint will
lead to a new line\&. For instance, when printing
"[(\-\-\-[(\-\-\-\-[(\-\-\-b)]b)]b)]", where "b" is a break hint without extra
indentation (
.ft B
print_cut ()
.ft R
)\&. If "[" means opening of a packing "hov" box
(
.ft B
Format\&.open_hovbox
.ft R
), "[(\-\-\-[(\-\-\-\-[(\-\-\-b)]b)]b)]" is printed as
follows:
.sp

.EX
.ft B
.br
\&(\-\-\-
.br
\& (\-\-\-\-
.br
\&  (\-\-\-)))
.br
\&
.ft R
.EE
.sp
If we replace the packing boxes by structural boxes (
.ft B
Format\&.open_box
.ft R
), each
break hint that precedes a closing parenthesis can show the boxes structure, if
it leads to a new line; hence "[(\-\-\-[(\-\-\-\-[(\-\-\-b)]b)]b)]" is printed like
this:
.sp

.EX
.ft B
.br
\&(\-\-\-
.br
\& (\-\-\-\-
.br
\&  (\-\-\-
.br
\&  )
.br
\& )
.br
\&)
.br
\&
.ft R
.EE
.sp
.SS Practical advice
.sp
When writing a pretty\-printing routine, follow these simple rules:
.sp
.sp
\-Boxes must be opened and closed consistently (
.ft B
open_*
.ft R
and
.ft B
Format\&.close_box
.ft R
must be nested like parentheses)\&.
.sp
\-Never hesitate to open a box\&.
.sp
\-Output many break hints, otherwise the pretty\-printer is in a bad situation
where it tries to do its best, which is always "worse than your bad"\&.
.sp
\-Do not try to force spacing using explicit spaces in the character strings\&.
For each space you want in the output emit a break hint (
.ft B
print_space ()
.ft R
),
unless you explicitly don\&'t want the line to be broken here\&. For instance,
imagine you want to pretty print an OCaml definition, more precisely a 
.ft B
let rec
.br
\&ident = expression
.ft R
value definition\&. You will probably treat the first three
spaces as "unbreakable spaces" and write them directly in the string constants
for keywords, and print 
.ft B
"let rec"
.ft R
before the identifier, and similarly write
.ft B
=
.ft R
to get an unbreakable space after the identifier; in contrast, the space
after the 
.ft B
=
.ft R
sign is certainly a break hint, since breaking the line after 
.ft B
=
.ft R
is a usual (and elegant) way to indent the expression part of a definition\&.  In
short, it is often necessary to print unbreakable spaces; however, most of the
time a space should be considered a break hint\&.
.sp
\-Do not try to force new lines, let the pretty\-printer do it for you: that\&'s
its only job\&.  In particular, do not use 
.ft B
Format\&.force_newline
.ft R
: this
procedure effectively leads to a newline, but it also as the unfortunate side
effect to partially reinitialise the pretty\-printing engine, so that the rest
of the printing material is noticeably messed up\&.
.sp
\-Never put newline characters directly in the strings to be printed: pretty
printing engine will consider this newline character as any other character
written on the current line and this will completely mess up the output\&.
Instead of new line characters use line break hints: if those break hints must
always result in new lines, it just means that the surrounding box must be a
vertical box!
.sp
\-End your main program by a 
.ft B
print_newline ()
.ft R
call, that flushes the
pretty\-printer tables (hence the output)\&.  (Note that the top\-level loop of the
interactive system does it as well, just before a new input\&.)

.SS Printing to stdout: using printf
.sp
The format module provides a general printing facility "a la" printf\&. In
addition to the usual conversion facility provided by printf, you can write
pretty\-printing indications directly inside the format string (opening and
closing boxes, indicating breaking hints, etc)\&.
.sp
Pretty\-printing annotations are introduced by the 
.ft B
@
.ft R
symbol, directly into the
string format\&. Almost any function of the 
.ft B
Format
.ft R
module can be called from
within a 
.ft B
printf
.ft R
format string\&. For instance
.sp
.sp
\-"
.ft B
@[
.ft R
" open a box (open_box 0)\&.  You may precise the type as an extra
argument\&. For instance 
.ft B
@[<hov n>
.ft R
is equivalent to 
.ft B
open_hovbox n
.ft R
\&.
.sp
\-"
.ft B
@]
.ft R
" close a box (
.ft B
close_box ()
.ft R
)\&.
.sp
\-"
.ft B
@ 
.ft R
" output a breakable space (
.ft B
print_space ()
.ft R
)\&.
.sp
\-"
.ft B
@,
.ft R
" output a break hint (
.ft B
print_cut ()
.ft R
)\&.
.sp
\-"
.ft B
@;<n m>
.ft R
" emit a "full" break hint (
.ft B
print_break n m
.ft R
)\&.
.sp
\-"
.ft B
@\&.
.ft R
" end the pretty\-printing, closing all the boxes still opened
(
.ft B
print_newline ()
.ft R
)\&.

For instance
.sp
printf "@[<1>%s@ =@ %d@ %s@]@\&." "Prix TTC" 100 "Euros";;
Prix TTC = 100 Euros
\- : unit = ()
.sp
.SS  A concrete example
.sp
Let me give a full example: the shortest non trivial example you could imagine,
that is the lambda calculus :)
.sp
Thus the problem is to pretty\-print the values of a concrete data type that
models a language of expressions that defines functions and their applications
to arguments\&.
.sp
First, I give the abstract syntax of lambda\-terms:
.sp
type lambda =
| Lambda of string * lambda
| Var of string
| Apply of lambda * lambda
;;
.sp
I use the format library to print the lambda\-terms:
.sp
open Format;;
let ident = print_string;;
let kwd = print_string;;
val ident : string \-> unit = <fun>
val kwd : string \-> unit = <fun>
let rec print_exp0 = function
| Var s \->  ident s
| lam \-> open_hovbox 1; kwd "("; print_lambda lam; kwd ")"; close_box ()
and print_app = function
| e \-> open_hovbox 2; print_other_applications e; close_box ()
and print_other_applications f =
match f with
| Apply (f, arg) \-> print_app f; print_space (); print_exp0 arg
| f \-> print_exp0 f
and print_lambda = function
| Lambda (s, lam) \->
open_hovbox 1;
kwd "\(rs\(rs"; ident s; kwd "\&."; print_space(); print_lambda lam;
close_box()
| e \-> print_app e;;
val print_app : lambda \-> unit = <fun>
val print_other_applications : lambda \-> unit = <fun>
val print_lambda : lambda \-> unit = <fun>
.sp
.SS Most general pretty-printing: using fprintf
.sp
We use the 
.ft B
fprintf
.ft R
function to write the most versatile version of the
pretty\-printing functions for lambda\-terms\&.  Now, the functions get an extra
argument, namely a pretty\-printing formatter (the ppf argument) where printing
will occur\&. This way the printing routines are more general, since they can
print on any formatter defined in the program (either printing to a file, or to
.ft B
stdout
.ft R
, to 
.ft B
stderr
.ft R
, or even to a string)\&.  Furthermore, the pretty\-printing
functions are now compositional, since they may be used in conjunction with the
special 
.ft B
%a
.ft R
conversion, that prints a 
.ft B
fprintf
.ft R
argument with a user\&'s supplied
function (these user\&'s supplied functions also have a formatter as first
argument)\&.
.sp
Using 
.ft B
fprintf
.ft R
, the lambda\-terms printing routines can be written as follows:
.sp
open Format;;
let ident ppf s = fprintf ppf "%s" s;;
let kwd ppf s = fprintf ppf "%s" s;;
val ident : Format\&.formatter \-> string \-> unit
val kwd : Format\&.formatter \-> string \-> unit
let rec pr_exp0 ppf = function
| Var s \-> fprintf ppf "%a" ident s
| lam \-> fprintf ppf "@[<1>(%a)@]" pr_lambda lam
and pr_app ppf = function
| e \-> fprintf ppf "@[<2>%a@]" pr_other_applications e
and pr_other_applications ppf f =
match f with
| Apply (f, arg) \-> fprintf ppf "%a@ %a" pr_app f pr_exp0 arg
| f \-> pr_exp0 ppf f
and pr_lambda ppf = function
| Lambda (s, lam) \->
fprintf ppf "@[<1>%a%a%a@ %a@]" kwd "\(rs\(rs" ident s kwd "\&." pr_lambda lam
| e \-> pr_app ppf e
;;
val pr_app : Format\&.formatter \-> lambda \-> unit
val pr_other_applications : Format\&.formatter \-> lambda \-> unit
val pr_lambda : Format\&.formatter \-> lambda \-> unit
.sp
Given those general printing routines, procedures to print to 
.ft B
stdout
.ft R
or
.ft B
stderr
.ft R
is just a matter of partial application:
.sp
let print_lambda = pr_lambda std_formatter;;
let eprint_lambda = pr_lambda err_formatter;;
val print_lambda : lambda \-> unit
val eprint_lambda : lambda \-> unit


.sp

.sp
.sp
